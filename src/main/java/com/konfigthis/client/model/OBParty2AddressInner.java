/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBAddressTypeCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Postal address of a party.
 */
@ApiModel(description = "Postal address of a party.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBParty2AddressInner {
  public static final String SERIALIZED_NAME_ADDRESS_LINE = "AddressLine";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE)
  private List<String> addressLine = null;

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "AddressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private OBAddressTypeCode addressType;

  public static final String SERIALIZED_NAME_BUILDING_NUMBER = "BuildingNumber";
  @SerializedName(SERIALIZED_NAME_BUILDING_NUMBER)
  private String buildingNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTRY_SUB_DIVISION = "CountrySubDivision";
  @SerializedName(SERIALIZED_NAME_COUNTRY_SUB_DIVISION)
  private String countrySubDivision;

  public static final String SERIALIZED_NAME_POST_CODE = "PostCode";
  @SerializedName(SERIALIZED_NAME_POST_CODE)
  private String postCode;

  public static final String SERIALIZED_NAME_STREET_NAME = "StreetName";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public static final String SERIALIZED_NAME_TOWN_NAME = "TownName";
  @SerializedName(SERIALIZED_NAME_TOWN_NAME)
  private String townName;

  public OBParty2AddressInner() {
  }

  public OBParty2AddressInner addressLine(List<String> addressLine) {
    
    
    
    
    this.addressLine = addressLine;
    return this;
  }

  public OBParty2AddressInner addAddressLineItem(String addressLineItem) {
    if (this.addressLine == null) {
      this.addressLine = new ArrayList<>();
    }
    this.addressLine.add(addressLineItem);
    return this;
  }

   /**
   * Get addressLine
   * @return addressLine
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAddressLine() {
    return addressLine;
  }


  public void setAddressLine(List<String> addressLine) {
    
    
    
    this.addressLine = addressLine;
  }


  public OBParty2AddressInner addressType(OBAddressTypeCode addressType) {
    
    
    
    
    this.addressType = addressType;
    return this;
  }

   /**
   * Get addressType
   * @return addressType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBAddressTypeCode getAddressType() {
    return addressType;
  }


  public void setAddressType(OBAddressTypeCode addressType) {
    
    
    
    this.addressType = addressType;
  }


  public OBParty2AddressInner buildingNumber(String buildingNumber) {
    
    
    if (buildingNumber != null && buildingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for buildingNumber. Length must be greater than or equal to 1.");
    }
    
    this.buildingNumber = buildingNumber;
    return this;
  }

   /**
   * Number that identifies the position of a building on a street.
   * @return buildingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number that identifies the position of a building on a street.")

  public String getBuildingNumber() {
    return buildingNumber;
  }


  public void setBuildingNumber(String buildingNumber) {
    
    
    if (buildingNumber != null && buildingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for buildingNumber. Length must be greater than or equal to 1.");
    }
    this.buildingNumber = buildingNumber;
  }


  public OBParty2AddressInner country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Nation with its own government, occupying a particular territory.
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Nation with its own government, occupying a particular territory.")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public OBParty2AddressInner countrySubDivision(String countrySubDivision) {
    
    
    if (countrySubDivision != null && countrySubDivision.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countrySubDivision. Length must be greater than or equal to 1.");
    }
    
    this.countrySubDivision = countrySubDivision;
    return this;
  }

   /**
   * Identifies a subdivision of a country eg, state, region, county.
   * @return countrySubDivision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies a subdivision of a country eg, state, region, county.")

  public String getCountrySubDivision() {
    return countrySubDivision;
  }


  public void setCountrySubDivision(String countrySubDivision) {
    
    
    if (countrySubDivision != null && countrySubDivision.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countrySubDivision. Length must be greater than or equal to 1.");
    }
    this.countrySubDivision = countrySubDivision;
  }


  public OBParty2AddressInner postCode(String postCode) {
    
    
    if (postCode != null && postCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for postCode. Length must be greater than or equal to 1.");
    }
    
    this.postCode = postCode;
    return this;
  }

   /**
   * Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
   * @return postCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.")

  public String getPostCode() {
    return postCode;
  }


  public void setPostCode(String postCode) {
    
    
    if (postCode != null && postCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for postCode. Length must be greater than or equal to 1.");
    }
    this.postCode = postCode;
  }


  public OBParty2AddressInner streetName(String streetName) {
    
    
    if (streetName != null && streetName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetName. Length must be greater than or equal to 1.");
    }
    
    this.streetName = streetName;
    return this;
  }

   /**
   * Name of a street or thoroughfare.
   * @return streetName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of a street or thoroughfare.")

  public String getStreetName() {
    return streetName;
  }


  public void setStreetName(String streetName) {
    
    
    if (streetName != null && streetName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetName. Length must be greater than or equal to 1.");
    }
    this.streetName = streetName;
  }


  public OBParty2AddressInner townName(String townName) {
    
    
    if (townName != null && townName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for townName. Length must be greater than or equal to 1.");
    }
    
    this.townName = townName;
    return this;
  }

   /**
   * Name of a built-up area, with defined boundaries, and a local government.
   * @return townName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of a built-up area, with defined boundaries, and a local government.")

  public String getTownName() {
    return townName;
  }


  public void setTownName(String townName) {
    
    
    if (townName != null && townName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for townName. Length must be greater than or equal to 1.");
    }
    this.townName = townName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBParty2AddressInner instance itself
   */
  public OBParty2AddressInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBParty2AddressInner obParty2AddressInner = (OBParty2AddressInner) o;
    return Objects.equals(this.addressLine, obParty2AddressInner.addressLine) &&
        Objects.equals(this.addressType, obParty2AddressInner.addressType) &&
        Objects.equals(this.buildingNumber, obParty2AddressInner.buildingNumber) &&
        Objects.equals(this.country, obParty2AddressInner.country) &&
        Objects.equals(this.countrySubDivision, obParty2AddressInner.countrySubDivision) &&
        Objects.equals(this.postCode, obParty2AddressInner.postCode) &&
        Objects.equals(this.streetName, obParty2AddressInner.streetName) &&
        Objects.equals(this.townName, obParty2AddressInner.townName)&&
        Objects.equals(this.additionalProperties, obParty2AddressInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressLine, addressType, buildingNumber, country, countrySubDivision, postCode, streetName, townName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBParty2AddressInner {\n");
    sb.append("    addressLine: ").append(toIndentedString(addressLine)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    countrySubDivision: ").append(toIndentedString(countrySubDivision)).append("\n");
    sb.append("    postCode: ").append(toIndentedString(postCode)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    townName: ").append(toIndentedString(townName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AddressLine");
    openapiFields.add("AddressType");
    openapiFields.add("BuildingNumber");
    openapiFields.add("Country");
    openapiFields.add("CountrySubDivision");
    openapiFields.add("PostCode");
    openapiFields.add("StreetName");
    openapiFields.add("TownName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Country");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBParty2AddressInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBParty2AddressInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBParty2AddressInner is not found in the empty JSON string", OBParty2AddressInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBParty2AddressInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AddressLine") != null && !jsonObj.get("AddressLine").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AddressLine` to be an array in the JSON string but got `%s`", jsonObj.get("AddressLine").toString()));
      }
      if ((jsonObj.get("BuildingNumber") != null && !jsonObj.get("BuildingNumber").isJsonNull()) && !jsonObj.get("BuildingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BuildingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BuildingNumber").toString()));
      }
      if (!jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("CountrySubDivision") != null && !jsonObj.get("CountrySubDivision").isJsonNull()) && !jsonObj.get("CountrySubDivision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountrySubDivision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountrySubDivision").toString()));
      }
      if ((jsonObj.get("PostCode") != null && !jsonObj.get("PostCode").isJsonNull()) && !jsonObj.get("PostCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PostCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PostCode").toString()));
      }
      if ((jsonObj.get("StreetName") != null && !jsonObj.get("StreetName").isJsonNull()) && !jsonObj.get("StreetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreetName").toString()));
      }
      if ((jsonObj.get("TownName") != null && !jsonObj.get("TownName").isJsonNull()) && !jsonObj.get("TownName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TownName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TownName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBParty2AddressInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBParty2AddressInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBParty2AddressInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBParty2AddressInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OBParty2AddressInner>() {
           @Override
           public void write(JsonWriter out, OBParty2AddressInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBParty2AddressInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBParty2AddressInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBParty2AddressInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBParty2AddressInner
  * @throws IOException if the JSON string is invalid with respect to OBParty2AddressInner
  */
  public static OBParty2AddressInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBParty2AddressInner.class);
  }

 /**
  * Convert an instance of OBParty2AddressInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

