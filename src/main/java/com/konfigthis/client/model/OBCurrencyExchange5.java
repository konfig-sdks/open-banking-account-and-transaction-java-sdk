/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBCurrencyExchange5InstructedAmount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Set of elements used to provide details on the currency exchange.
 */
@ApiModel(description = "Set of elements used to provide details on the currency exchange.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBCurrencyExchange5 {
  public static final String SERIALIZED_NAME_CONTRACT_IDENTIFICATION = "ContractIdentification";
  @SerializedName(SERIALIZED_NAME_CONTRACT_IDENTIFICATION)
  private String contractIdentification;

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "ExchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private Double exchangeRate;

  public static final String SERIALIZED_NAME_INSTRUCTED_AMOUNT = "InstructedAmount";
  @SerializedName(SERIALIZED_NAME_INSTRUCTED_AMOUNT)
  private OBCurrencyExchange5InstructedAmount instructedAmount;

  public static final String SERIALIZED_NAME_QUOTATION_DATE = "QuotationDate";
  @SerializedName(SERIALIZED_NAME_QUOTATION_DATE)
  private OffsetDateTime quotationDate;

  public static final String SERIALIZED_NAME_SOURCE_CURRENCY = "SourceCurrency";
  @SerializedName(SERIALIZED_NAME_SOURCE_CURRENCY)
  private String sourceCurrency;

  public static final String SERIALIZED_NAME_TARGET_CURRENCY = "TargetCurrency";
  @SerializedName(SERIALIZED_NAME_TARGET_CURRENCY)
  private String targetCurrency;

  public static final String SERIALIZED_NAME_UNIT_CURRENCY = "UnitCurrency";
  @SerializedName(SERIALIZED_NAME_UNIT_CURRENCY)
  private String unitCurrency;

  public OBCurrencyExchange5() {
  }

  public OBCurrencyExchange5 contractIdentification(String contractIdentification) {
    
    
    if (contractIdentification != null && contractIdentification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractIdentification. Length must be greater than or equal to 1.");
    }
    
    this.contractIdentification = contractIdentification;
    return this;
  }

   /**
   * Unique identification to unambiguously identify the foreign exchange contract.
   * @return contractIdentification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identification to unambiguously identify the foreign exchange contract.")

  public String getContractIdentification() {
    return contractIdentification;
  }


  public void setContractIdentification(String contractIdentification) {
    
    
    if (contractIdentification != null && contractIdentification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractIdentification. Length must be greater than or equal to 1.");
    }
    this.contractIdentification = contractIdentification;
  }


  public OBCurrencyExchange5 exchangeRate(Double exchangeRate) {
    
    
    
    
    this.exchangeRate = exchangeRate;
    return this;
  }

  public OBCurrencyExchange5 exchangeRate(Integer exchangeRate) {
    
    
    
    
    this.exchangeRate = exchangeRate.doubleValue();
    return this;
  }

   /**
   * Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate &#x3D; UnitCurrency/QuotedCurrency).
   * @return exchangeRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Factor used to convert an amount from one currency into another. This reflects the price at which one currency was bought with another currency. Usage: ExchangeRate expresses the ratio between UnitCurrency and QuotedCurrency (ExchangeRate = UnitCurrency/QuotedCurrency).")

  public Double getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(Double exchangeRate) {
    
    
    
    this.exchangeRate = exchangeRate;
  }


  public OBCurrencyExchange5 instructedAmount(OBCurrencyExchange5InstructedAmount instructedAmount) {
    
    
    
    
    this.instructedAmount = instructedAmount;
    return this;
  }

   /**
   * Get instructedAmount
   * @return instructedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBCurrencyExchange5InstructedAmount getInstructedAmount() {
    return instructedAmount;
  }


  public void setInstructedAmount(OBCurrencyExchange5InstructedAmount instructedAmount) {
    
    
    
    this.instructedAmount = instructedAmount;
  }


  public OBCurrencyExchange5 quotationDate(OffsetDateTime quotationDate) {
    
    
    
    
    this.quotationDate = quotationDate;
    return this;
  }

   /**
   * Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
   * @return quotationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time at which an exchange rate is quoted.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")

  public OffsetDateTime getQuotationDate() {
    return quotationDate;
  }


  public void setQuotationDate(OffsetDateTime quotationDate) {
    
    
    
    this.quotationDate = quotationDate;
  }


  public OBCurrencyExchange5 sourceCurrency(String sourceCurrency) {
    
    
    
    
    this.sourceCurrency = sourceCurrency;
    return this;
  }

   /**
   * Currency from which an amount is to be converted in a currency conversion.
   * @return sourceCurrency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Currency from which an amount is to be converted in a currency conversion.")

  public String getSourceCurrency() {
    return sourceCurrency;
  }


  public void setSourceCurrency(String sourceCurrency) {
    
    
    
    this.sourceCurrency = sourceCurrency;
  }


  public OBCurrencyExchange5 targetCurrency(String targetCurrency) {
    
    
    
    
    this.targetCurrency = targetCurrency;
    return this;
  }

   /**
   * Currency into which an amount is to be converted in a currency conversion.
   * @return targetCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency into which an amount is to be converted in a currency conversion.")

  public String getTargetCurrency() {
    return targetCurrency;
  }


  public void setTargetCurrency(String targetCurrency) {
    
    
    
    this.targetCurrency = targetCurrency;
  }


  public OBCurrencyExchange5 unitCurrency(String unitCurrency) {
    
    
    
    
    this.unitCurrency = unitCurrency;
    return this;
  }

   /**
   * Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP &#x3D; xxxCUR, the unit currency is GBP.
   * @return unitCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.")

  public String getUnitCurrency() {
    return unitCurrency;
  }


  public void setUnitCurrency(String unitCurrency) {
    
    
    
    this.unitCurrency = unitCurrency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBCurrencyExchange5 instance itself
   */
  public OBCurrencyExchange5 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBCurrencyExchange5 obCurrencyExchange5 = (OBCurrencyExchange5) o;
    return Objects.equals(this.contractIdentification, obCurrencyExchange5.contractIdentification) &&
        Objects.equals(this.exchangeRate, obCurrencyExchange5.exchangeRate) &&
        Objects.equals(this.instructedAmount, obCurrencyExchange5.instructedAmount) &&
        Objects.equals(this.quotationDate, obCurrencyExchange5.quotationDate) &&
        Objects.equals(this.sourceCurrency, obCurrencyExchange5.sourceCurrency) &&
        Objects.equals(this.targetCurrency, obCurrencyExchange5.targetCurrency) &&
        Objects.equals(this.unitCurrency, obCurrencyExchange5.unitCurrency)&&
        Objects.equals(this.additionalProperties, obCurrencyExchange5.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractIdentification, exchangeRate, instructedAmount, quotationDate, sourceCurrency, targetCurrency, unitCurrency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBCurrencyExchange5 {\n");
    sb.append("    contractIdentification: ").append(toIndentedString(contractIdentification)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    instructedAmount: ").append(toIndentedString(instructedAmount)).append("\n");
    sb.append("    quotationDate: ").append(toIndentedString(quotationDate)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    targetCurrency: ").append(toIndentedString(targetCurrency)).append("\n");
    sb.append("    unitCurrency: ").append(toIndentedString(unitCurrency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContractIdentification");
    openapiFields.add("ExchangeRate");
    openapiFields.add("InstructedAmount");
    openapiFields.add("QuotationDate");
    openapiFields.add("SourceCurrency");
    openapiFields.add("TargetCurrency");
    openapiFields.add("UnitCurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExchangeRate");
    openapiRequiredFields.add("SourceCurrency");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBCurrencyExchange5
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBCurrencyExchange5.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBCurrencyExchange5 is not found in the empty JSON string", OBCurrencyExchange5.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBCurrencyExchange5.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("ContractIdentification") != null && !jsonObj.get("ContractIdentification").isJsonNull()) && !jsonObj.get("ContractIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContractIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContractIdentification").toString()));
      }
      // validate the optional field `InstructedAmount`
      if (jsonObj.get("InstructedAmount") != null && !jsonObj.get("InstructedAmount").isJsonNull()) {
        OBCurrencyExchange5InstructedAmount.validateJsonObject(jsonObj.getAsJsonObject("InstructedAmount"));
      }
      if (!jsonObj.get("SourceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceCurrency").toString()));
      }
      if ((jsonObj.get("TargetCurrency") != null && !jsonObj.get("TargetCurrency").isJsonNull()) && !jsonObj.get("TargetCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetCurrency").toString()));
      }
      if ((jsonObj.get("UnitCurrency") != null && !jsonObj.get("UnitCurrency").isJsonNull()) && !jsonObj.get("UnitCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UnitCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UnitCurrency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBCurrencyExchange5.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBCurrencyExchange5' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBCurrencyExchange5> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBCurrencyExchange5.class));

       return (TypeAdapter<T>) new TypeAdapter<OBCurrencyExchange5>() {
           @Override
           public void write(JsonWriter out, OBCurrencyExchange5 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBCurrencyExchange5 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBCurrencyExchange5 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBCurrencyExchange5 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBCurrencyExchange5
  * @throws IOException if the JSON string is invalid with respect to OBCurrencyExchange5
  */
  public static OBCurrencyExchange5 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBCurrencyExchange5.class);
  }

 /**
  * Convert an instance of OBCurrencyExchange5 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

