/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ProductDetailsProperty
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ProductDetailsProperty {
  public static final String SERIALIZED_NAME_FEE_FREE_LENGTH = "FeeFreeLength";
  @SerializedName(SERIALIZED_NAME_FEE_FREE_LENGTH)
  private Float feeFreeLength;

  /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   */
  @JsonAdapter(FeeFreeLengthPeriodEnum.Adapter.class)
 public enum FeeFreeLengthPeriodEnum {
    DAY("Day"),
    
    HALF_YEAR("Half Year"),
    
    MONTH("Month"),
    
    QUARTER("Quarter"),
    
    WEEK("Week"),
    
    YEAR("Year");

    private String value;

    FeeFreeLengthPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeeFreeLengthPeriodEnum fromValue(String value) {
      for (FeeFreeLengthPeriodEnum b : FeeFreeLengthPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeeFreeLengthPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeeFreeLengthPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeeFreeLengthPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeeFreeLengthPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEE_FREE_LENGTH_PERIOD = "FeeFreeLengthPeriod";
  @SerializedName(SERIALIZED_NAME_FEE_FREE_LENGTH_PERIOD)
  private FeeFreeLengthPeriodEnum feeFreeLengthPeriod;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
   */
  @JsonAdapter(SegmentEnum.Adapter.class)
 public enum SegmentEnum {
    CLIENTACCOUNT("ClientAccount"),
    
    STANDARD("Standard"),
    
    NONCOMMERCIALCHAITIESCLBSOC("NonCommercialChaitiesClbSoc"),
    
    NONCOMMERCIALPUBLICAUTHGOVT("NonCommercialPublicAuthGovt"),
    
    RELIGIOUS("Religious"),
    
    SECTORSPECIFIC("SectorSpecific"),
    
    STARTUP("Startup"),
    
    SWITCHER("Switcher");

    private String value;

    SegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentEnum fromValue(String value) {
      for (SegmentEnum b : SegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT = "Segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private List<SegmentEnum> segment = null;

  public ProductDetailsProperty() {
  }

  public ProductDetailsProperty feeFreeLength(Float feeFreeLength) {
    
    
    
    
    this.feeFreeLength = feeFreeLength;
    return this;
  }

   /**
   * The length/duration of the fee free period
   * @return feeFreeLength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The length/duration of the fee free period")

  public Float getFeeFreeLength() {
    return feeFreeLength;
  }


  public void setFeeFreeLength(Float feeFreeLength) {
    
    
    
    this.feeFreeLength = feeFreeLength;
  }


  public ProductDetailsProperty feeFreeLengthPeriod(FeeFreeLengthPeriodEnum feeFreeLengthPeriod) {
    
    
    
    
    this.feeFreeLengthPeriod = feeFreeLengthPeriod;
    return this;
  }

   /**
   * The unit of period (days, weeks, months etc.) of the promotional length
   * @return feeFreeLengthPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of period (days, weeks, months etc.) of the promotional length")

  public FeeFreeLengthPeriodEnum getFeeFreeLengthPeriod() {
    return feeFreeLengthPeriod;
  }


  public void setFeeFreeLengthPeriod(FeeFreeLengthPeriodEnum feeFreeLengthPeriod) {
    
    
    
    this.feeFreeLengthPeriod = feeFreeLengthPeriod;
  }


  public ProductDetailsProperty notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public ProductDetailsProperty addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Optional additional notes to supplement the Core product details
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional additional notes to supplement the Core product details")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public ProductDetailsProperty segment(List<SegmentEnum> segment) {
    
    
    
    
    this.segment = segment;
    return this;
  }

  public ProductDetailsProperty addSegmentItem(SegmentEnum segmentItem) {
    if (this.segment == null) {
      this.segment = new ArrayList<>();
    }
    this.segment.add(segmentItem);
    return this;
  }

   /**
   * Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. 
   * @return segment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Market segmentation is a marketing term referring to the aggregating of prospective buyers into groups, or segments, that have common needs and respond similarly to a marketing action. Market segmentation enables companies to target different categories of consumers who perceive the full value of certain products and services differently from one another.  Read more: Market Segmentation http://www.investopedia.com/terms/m/marketsegmentation.asp#ixzz4gfEEalTd  With respect to BCA products, they are segmented in relation to different markets that they wish to focus on. ")

  public List<SegmentEnum> getSegment() {
    return segment;
  }


  public void setSegment(List<SegmentEnum> segment) {
    
    
    
    this.segment = segment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ProductDetailsProperty instance itself
   */
  public ProductDetailsProperty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductDetailsProperty productDetailsProperty = (ProductDetailsProperty) o;
    return Objects.equals(this.feeFreeLength, productDetailsProperty.feeFreeLength) &&
        Objects.equals(this.feeFreeLengthPeriod, productDetailsProperty.feeFreeLengthPeriod) &&
        Objects.equals(this.notes, productDetailsProperty.notes) &&
        Objects.equals(this.segment, productDetailsProperty.segment)&&
        Objects.equals(this.additionalProperties, productDetailsProperty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feeFreeLength, feeFreeLengthPeriod, notes, segment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductDetailsProperty {\n");
    sb.append("    feeFreeLength: ").append(toIndentedString(feeFreeLength)).append("\n");
    sb.append("    feeFreeLengthPeriod: ").append(toIndentedString(feeFreeLengthPeriod)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FeeFreeLength");
    openapiFields.add("FeeFreeLengthPeriod");
    openapiFields.add("Notes");
    openapiFields.add("Segment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ProductDetailsProperty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ProductDetailsProperty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductDetailsProperty is not found in the empty JSON string", ProductDetailsProperty.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("FeeFreeLengthPeriod") != null && !jsonObj.get("FeeFreeLengthPeriod").isJsonNull()) && !jsonObj.get("FeeFreeLengthPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FeeFreeLengthPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FeeFreeLengthPeriod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Segment") != null && !jsonObj.get("Segment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Segment` to be an array in the JSON string but got `%s`", jsonObj.get("Segment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductDetailsProperty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductDetailsProperty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductDetailsProperty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductDetailsProperty.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductDetailsProperty>() {
           @Override
           public void write(JsonWriter out, ProductDetailsProperty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductDetailsProperty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ProductDetailsProperty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductDetailsProperty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductDetailsProperty
  * @throws IOException if the JSON string is invalid with respect to ProductDetailsProperty
  */
  public static ProductDetailsProperty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductDetailsProperty.class);
  }

 /**
  * Convert an instance of ProductDetailsProperty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

