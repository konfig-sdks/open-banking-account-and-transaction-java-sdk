/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
 */
@ApiModel(description = "Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBBranchAndFinancialInstitutionIdentification50 {
  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_SCHEME_NAME = "SchemeName";
  @SerializedName(SERIALIZED_NAME_SCHEME_NAME)
  private String schemeName;

  public OBBranchAndFinancialInstitutionIdentification50() {
  }

  public OBBranchAndFinancialInstitutionIdentification50 identification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of the servicing institution.
   * @return identification
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique and unambiguous identification of the servicing institution.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    this.identification = identification;
  }


  public OBBranchAndFinancialInstitutionIdentification50 schemeName(String schemeName) {
    
    
    
    
    this.schemeName = schemeName;
    return this;
  }

   /**
   * Name of the identification scheme, in a coded form as published in an external list.
   * @return schemeName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the identification scheme, in a coded form as published in an external list.")

  public String getSchemeName() {
    return schemeName;
  }


  public void setSchemeName(String schemeName) {
    
    
    
    this.schemeName = schemeName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBBranchAndFinancialInstitutionIdentification50 instance itself
   */
  public OBBranchAndFinancialInstitutionIdentification50 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBBranchAndFinancialInstitutionIdentification50 obBranchAndFinancialInstitutionIdentification50 = (OBBranchAndFinancialInstitutionIdentification50) o;
    return Objects.equals(this.identification, obBranchAndFinancialInstitutionIdentification50.identification) &&
        Objects.equals(this.schemeName, obBranchAndFinancialInstitutionIdentification50.schemeName)&&
        Objects.equals(this.additionalProperties, obBranchAndFinancialInstitutionIdentification50.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identification, schemeName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBBranchAndFinancialInstitutionIdentification50 {\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    schemeName: ").append(toIndentedString(schemeName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Identification");
    openapiFields.add("SchemeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identification");
    openapiRequiredFields.add("SchemeName");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBBranchAndFinancialInstitutionIdentification50
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBBranchAndFinancialInstitutionIdentification50.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBBranchAndFinancialInstitutionIdentification50 is not found in the empty JSON string", OBBranchAndFinancialInstitutionIdentification50.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBBranchAndFinancialInstitutionIdentification50.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (!jsonObj.get("SchemeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SchemeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBBranchAndFinancialInstitutionIdentification50.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBBranchAndFinancialInstitutionIdentification50' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBBranchAndFinancialInstitutionIdentification50> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBBranchAndFinancialInstitutionIdentification50.class));

       return (TypeAdapter<T>) new TypeAdapter<OBBranchAndFinancialInstitutionIdentification50>() {
           @Override
           public void write(JsonWriter out, OBBranchAndFinancialInstitutionIdentification50 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBBranchAndFinancialInstitutionIdentification50 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBBranchAndFinancialInstitutionIdentification50 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBBranchAndFinancialInstitutionIdentification50 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBBranchAndFinancialInstitutionIdentification50
  * @throws IOException if the JSON string is invalid with respect to OBBranchAndFinancialInstitutionIdentification50
  */
  public static OBBranchAndFinancialInstitutionIdentification50 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBBranchAndFinancialInstitutionIdentification50.class);
  }

 /**
  * Convert an instance of OBBranchAndFinancialInstitutionIdentification50 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

