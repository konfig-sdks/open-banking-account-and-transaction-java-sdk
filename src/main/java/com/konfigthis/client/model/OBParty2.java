/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBExternalPartyType1Code;
import com.konfigthis.client.model.OBParty2AddressInner;
import com.konfigthis.client.model.OBPartyRelationships1;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OBParty2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBParty2 {
  public static final String SERIALIZED_NAME_ACCOUNT_ROLE = "AccountRole";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ROLE)
  private String accountRole;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<OBParty2AddressInner> address = null;

  public static final String SERIALIZED_NAME_BENEFICIAL_OWNERSHIP = "BeneficialOwnership";
  @SerializedName(SERIALIZED_NAME_BENEFICIAL_OWNERSHIP)
  private Boolean beneficialOwnership;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_FULL_LEGAL_NAME = "FullLegalName";
  @SerializedName(SERIALIZED_NAME_FULL_LEGAL_NAME)
  private String fullLegalName;

  public static final String SERIALIZED_NAME_LEGAL_STRUCTURE = "LegalStructure";
  @SerializedName(SERIALIZED_NAME_LEGAL_STRUCTURE)
  private String legalStructure;

  public static final String SERIALIZED_NAME_MOBILE = "Mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private String mobile;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTY_ID = "PartyId";
  @SerializedName(SERIALIZED_NAME_PARTY_ID)
  private String partyId;

  public static final String SERIALIZED_NAME_PARTY_NUMBER = "PartyNumber";
  @SerializedName(SERIALIZED_NAME_PARTY_NUMBER)
  private String partyNumber;

  public static final String SERIALIZED_NAME_PARTY_TYPE = "PartyType";
  @SerializedName(SERIALIZED_NAME_PARTY_TYPE)
  private OBExternalPartyType1Code partyType;

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "Relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private OBPartyRelationships1 relationships;

  public OBParty2() {
  }

  public OBParty2 accountRole(String accountRole) {
    
    
    
    
    this.accountRole = accountRole;
    return this;
  }

   /**
   * A party’s role with respect to the related account.
   * @return accountRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A party’s role with respect to the related account.")

  public String getAccountRole() {
    return accountRole;
  }


  public void setAccountRole(String accountRole) {
    
    
    
    this.accountRole = accountRole;
  }


  public OBParty2 address(List<OBParty2AddressInner> address) {
    
    
    
    
    this.address = address;
    return this;
  }

  public OBParty2 addAddressItem(OBParty2AddressInner addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OBParty2AddressInner> getAddress() {
    return address;
  }


  public void setAddress(List<OBParty2AddressInner> address) {
    
    
    
    this.address = address;
  }


  public OBParty2 beneficialOwnership(Boolean beneficialOwnership) {
    
    
    
    
    this.beneficialOwnership = beneficialOwnership;
    return this;
  }

   /**
   * Get beneficialOwnership
   * @return beneficialOwnership
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBeneficialOwnership() {
    return beneficialOwnership;
  }


  public void setBeneficialOwnership(Boolean beneficialOwnership) {
    
    
    
    this.beneficialOwnership = beneficialOwnership;
  }


  public OBParty2 emailAddress(String emailAddress) {
    
    
    if (emailAddress != null && emailAddress.length() < 1) {
      throw new IllegalArgumentException("Invalid value for emailAddress. Length must be greater than or equal to 1.");
    }
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Address for electronic mail (e-mail).
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Address for electronic mail (e-mail).")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    
    
    if (emailAddress != null && emailAddress.length() < 1) {
      throw new IllegalArgumentException("Invalid value for emailAddress. Length must be greater than or equal to 1.");
    }
    this.emailAddress = emailAddress;
  }


  public OBParty2 fullLegalName(String fullLegalName) {
    
    
    if (fullLegalName != null && fullLegalName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fullLegalName. Length must be greater than or equal to 1.");
    }
    
    this.fullLegalName = fullLegalName;
    return this;
  }

   /**
   * Specifies a character string with a maximum length of 350 characters.
   * @return fullLegalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a character string with a maximum length of 350 characters.")

  public String getFullLegalName() {
    return fullLegalName;
  }


  public void setFullLegalName(String fullLegalName) {
    
    
    if (fullLegalName != null && fullLegalName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fullLegalName. Length must be greater than or equal to 1.");
    }
    this.fullLegalName = fullLegalName;
  }


  public OBParty2 legalStructure(String legalStructure) {
    
    
    
    
    this.legalStructure = legalStructure;
    return this;
  }

   /**
   * Legal standing of the party.
   * @return legalStructure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Legal standing of the party.")

  public String getLegalStructure() {
    return legalStructure;
  }


  public void setLegalStructure(String legalStructure) {
    
    
    
    this.legalStructure = legalStructure;
  }


  public OBParty2 mobile(String mobile) {
    
    
    
    
    this.mobile = mobile;
    return this;
  }

   /**
   * Collection of information that identifies a mobile phone number, as defined by telecom services.
   * @return mobile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Collection of information that identifies a mobile phone number, as defined by telecom services.")

  public String getMobile() {
    return mobile;
  }


  public void setMobile(String mobile) {
    
    
    
    this.mobile = mobile;
  }


  public OBParty2 name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Name by which a party is known and which is usually used to identify that party.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name by which a party is known and which is usually used to identify that party.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public OBParty2 partyId(String partyId) {
    
    
    if (partyId != null && partyId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 1.");
    }
    
    this.partyId = partyId;
    return this;
  }

   /**
   * A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.
   * @return partyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique and immutable identifier used to identify the customer resource. This identifier has no meaning to the account owner.")

  public String getPartyId() {
    return partyId;
  }


  public void setPartyId(String partyId) {
    
    
    if (partyId != null && partyId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 1.");
    }
    this.partyId = partyId;
  }


  public OBParty2 partyNumber(String partyNumber) {
    
    
    if (partyNumber != null && partyNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for partyNumber. Length must be greater than or equal to 1.");
    }
    
    this.partyNumber = partyNumber;
    return this;
  }

   /**
   * Number assigned by an agent to identify its customer.
   * @return partyNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number assigned by an agent to identify its customer.")

  public String getPartyNumber() {
    return partyNumber;
  }


  public void setPartyNumber(String partyNumber) {
    
    
    if (partyNumber != null && partyNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for partyNumber. Length must be greater than or equal to 1.");
    }
    this.partyNumber = partyNumber;
  }


  public OBParty2 partyType(OBExternalPartyType1Code partyType) {
    
    
    
    
    this.partyType = partyType;
    return this;
  }

   /**
   * Get partyType
   * @return partyType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBExternalPartyType1Code getPartyType() {
    return partyType;
  }


  public void setPartyType(OBExternalPartyType1Code partyType) {
    
    
    
    this.partyType = partyType;
  }


  public OBParty2 phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Collection of information that identifies a phone number, as defined by telecom services.
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Collection of information that identifies a phone number, as defined by telecom services.")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public OBParty2 relationships(OBPartyRelationships1 relationships) {
    
    
    
    
    this.relationships = relationships;
    return this;
  }

   /**
   * Get relationships
   * @return relationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBPartyRelationships1 getRelationships() {
    return relationships;
  }


  public void setRelationships(OBPartyRelationships1 relationships) {
    
    
    
    this.relationships = relationships;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBParty2 instance itself
   */
  public OBParty2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBParty2 obParty2 = (OBParty2) o;
    return Objects.equals(this.accountRole, obParty2.accountRole) &&
        Objects.equals(this.address, obParty2.address) &&
        Objects.equals(this.beneficialOwnership, obParty2.beneficialOwnership) &&
        Objects.equals(this.emailAddress, obParty2.emailAddress) &&
        Objects.equals(this.fullLegalName, obParty2.fullLegalName) &&
        Objects.equals(this.legalStructure, obParty2.legalStructure) &&
        Objects.equals(this.mobile, obParty2.mobile) &&
        Objects.equals(this.name, obParty2.name) &&
        Objects.equals(this.partyId, obParty2.partyId) &&
        Objects.equals(this.partyNumber, obParty2.partyNumber) &&
        Objects.equals(this.partyType, obParty2.partyType) &&
        Objects.equals(this.phone, obParty2.phone) &&
        Objects.equals(this.relationships, obParty2.relationships)&&
        Objects.equals(this.additionalProperties, obParty2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountRole, address, beneficialOwnership, emailAddress, fullLegalName, legalStructure, mobile, name, partyId, partyNumber, partyType, phone, relationships, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBParty2 {\n");
    sb.append("    accountRole: ").append(toIndentedString(accountRole)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    beneficialOwnership: ").append(toIndentedString(beneficialOwnership)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    fullLegalName: ").append(toIndentedString(fullLegalName)).append("\n");
    sb.append("    legalStructure: ").append(toIndentedString(legalStructure)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partyId: ").append(toIndentedString(partyId)).append("\n");
    sb.append("    partyNumber: ").append(toIndentedString(partyNumber)).append("\n");
    sb.append("    partyType: ").append(toIndentedString(partyType)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountRole");
    openapiFields.add("Address");
    openapiFields.add("BeneficialOwnership");
    openapiFields.add("EmailAddress");
    openapiFields.add("FullLegalName");
    openapiFields.add("LegalStructure");
    openapiFields.add("Mobile");
    openapiFields.add("Name");
    openapiFields.add("PartyId");
    openapiFields.add("PartyNumber");
    openapiFields.add("PartyType");
    openapiFields.add("Phone");
    openapiFields.add("Relationships");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PartyId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBParty2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBParty2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBParty2 is not found in the empty JSON string", OBParty2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBParty2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AccountRole") != null && !jsonObj.get("AccountRole").isJsonNull()) && !jsonObj.get("AccountRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountRole").toString()));
      }
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("Address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Address` to be an array in the JSON string but got `%s`", jsonObj.get("Address").toString()));
          }

          // validate the optional field `Address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            OBParty2AddressInner.validateJsonObject(jsonArrayaddress.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) && !jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if ((jsonObj.get("FullLegalName") != null && !jsonObj.get("FullLegalName").isJsonNull()) && !jsonObj.get("FullLegalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullLegalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullLegalName").toString()));
      }
      if ((jsonObj.get("LegalStructure") != null && !jsonObj.get("LegalStructure").isJsonNull()) && !jsonObj.get("LegalStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalStructure").toString()));
      }
      if ((jsonObj.get("Mobile") != null && !jsonObj.get("Mobile").isJsonNull()) && !jsonObj.get("Mobile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mobile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mobile").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("PartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyId").toString()));
      }
      if ((jsonObj.get("PartyNumber") != null && !jsonObj.get("PartyNumber").isJsonNull()) && !jsonObj.get("PartyNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartyNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartyNumber").toString()));
      }
      if ((jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) && !jsonObj.get("Phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
      }
      // validate the optional field `Relationships`
      if (jsonObj.get("Relationships") != null && !jsonObj.get("Relationships").isJsonNull()) {
        OBPartyRelationships1.validateJsonObject(jsonObj.getAsJsonObject("Relationships"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBParty2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBParty2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBParty2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBParty2.class));

       return (TypeAdapter<T>) new TypeAdapter<OBParty2>() {
           @Override
           public void write(JsonWriter out, OBParty2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBParty2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBParty2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBParty2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBParty2
  * @throws IOException if the JSON string is invalid with respect to OBParty2
  */
  public static OBParty2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBParty2.class);
  }

 /**
  * Convert an instance of OBParty2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

