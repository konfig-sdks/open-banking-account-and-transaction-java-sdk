/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Repayment details of the Loan product
 */
@ApiModel(description = "Repayment details of the Loan product")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBReadProduct2DataProductInnerOtherProductTypeRepayment {
  /**
   * The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
   */
  @JsonAdapter(AmountTypeEnum.Adapter.class)
 public enum AmountTypeEnum {
    RABD("RABD"),
    
    RABL("RABL"),
    
    RACI("RACI"),
    
    RAFC("RAFC"),
    
    RAIO("RAIO"),
    
    RALT("RALT"),
    
    USOT("USOT");

    private String value;

    AmountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmountTypeEnum fromValue(String value) {
      for (AmountTypeEnum b : AmountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AMOUNT_TYPE = "AmountType";
  @SerializedName(SERIALIZED_NAME_AMOUNT_TYPE)
  private AmountTypeEnum amountType;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OTHER_AMOUNT_TYPE = "OtherAmountType";
  @SerializedName(SERIALIZED_NAME_OTHER_AMOUNT_TYPE)
  private OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType otherAmountType;

  public static final String SERIALIZED_NAME_OTHER_REPAYMENT_FREQUENCY = "OtherRepaymentFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_REPAYMENT_FREQUENCY)
  private OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency otherRepaymentFrequency;

  public static final String SERIALIZED_NAME_OTHER_REPAYMENT_TYPE = "OtherRepaymentType";
  @SerializedName(SERIALIZED_NAME_OTHER_REPAYMENT_TYPE)
  private OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType otherRepaymentType;

  public static final String SERIALIZED_NAME_REPAYMENT_FEE_CHARGES = "RepaymentFeeCharges";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_FEE_CHARGES)
  private OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges repaymentFeeCharges;

  /**
   * Repayment frequency
   */
  @JsonAdapter(RepaymentFrequencyEnum.Adapter.class)
 public enum RepaymentFrequencyEnum {
    SMDA("SMDA"),
    
    SMFL("SMFL"),
    
    SMFO("SMFO"),
    
    SMHY("SMHY"),
    
    SMMO("SMMO"),
    
    SMOT("SMOT"),
    
    SMQU("SMQU"),
    
    SMWE("SMWE"),
    
    SMYE("SMYE");

    private String value;

    RepaymentFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepaymentFrequencyEnum fromValue(String value) {
      for (RepaymentFrequencyEnum b : RepaymentFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepaymentFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepaymentFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepaymentFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepaymentFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPAYMENT_FREQUENCY = "RepaymentFrequency";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_FREQUENCY)
  private RepaymentFrequencyEnum repaymentFrequency;

  public static final String SERIALIZED_NAME_REPAYMENT_HOLIDAY = "RepaymentHoliday";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_HOLIDAY)
  private List<OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner> repaymentHoliday = null;

  /**
   * Repayment type
   */
  @JsonAdapter(RepaymentTypeEnum.Adapter.class)
 public enum RepaymentTypeEnum {
    USBA("USBA"),
    
    USBU("USBU"),
    
    USCI("USCI"),
    
    USCS("USCS"),
    
    USER("USER"),
    
    USFA("USFA"),
    
    USFB("USFB"),
    
    USFI("USFI"),
    
    USIO("USIO"),
    
    USOT("USOT"),
    
    USPF("USPF"),
    
    USRW("USRW"),
    
    USSL("USSL");

    private String value;

    RepaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepaymentTypeEnum fromValue(String value) {
      for (RepaymentTypeEnum b : RepaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepaymentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REPAYMENT_TYPE = "RepaymentType";
  @SerializedName(SERIALIZED_NAME_REPAYMENT_TYPE)
  private RepaymentTypeEnum repaymentType;

  public OBReadProduct2DataProductInnerOtherProductTypeRepayment() {
  }

  public OBReadProduct2DataProductInnerOtherProductTypeRepayment amountType(AmountTypeEnum amountType) {
    
    
    
    
    this.amountType = amountType;
    return this;
  }

   /**
   * The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc
   * @return amountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The repayment is for paying just the interest only or both interest and capital or bullet amount or balance to date etc")

  public AmountTypeEnum getAmountType() {
    return amountType;
  }


  public void setAmountType(AmountTypeEnum amountType) {
    
    
    
    this.amountType = amountType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeRepayment addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment otherAmountType(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType otherAmountType) {
    
    
    
    
    this.otherAmountType = otherAmountType;
    return this;
  }

   /**
   * Get otherAmountType
   * @return otherAmountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType getOtherAmountType() {
    return otherAmountType;
  }


  public void setOtherAmountType(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType otherAmountType) {
    
    
    
    this.otherAmountType = otherAmountType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment otherRepaymentFrequency(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency otherRepaymentFrequency) {
    
    
    
    
    this.otherRepaymentFrequency = otherRepaymentFrequency;
    return this;
  }

   /**
   * Get otherRepaymentFrequency
   * @return otherRepaymentFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency getOtherRepaymentFrequency() {
    return otherRepaymentFrequency;
  }


  public void setOtherRepaymentFrequency(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency otherRepaymentFrequency) {
    
    
    
    this.otherRepaymentFrequency = otherRepaymentFrequency;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment otherRepaymentType(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType otherRepaymentType) {
    
    
    
    
    this.otherRepaymentType = otherRepaymentType;
    return this;
  }

   /**
   * Get otherRepaymentType
   * @return otherRepaymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType getOtherRepaymentType() {
    return otherRepaymentType;
  }


  public void setOtherRepaymentType(OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType otherRepaymentType) {
    
    
    
    this.otherRepaymentType = otherRepaymentType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment repaymentFeeCharges(OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges repaymentFeeCharges) {
    
    
    
    
    this.repaymentFeeCharges = repaymentFeeCharges;
    return this;
  }

   /**
   * Get repaymentFeeCharges
   * @return repaymentFeeCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges getRepaymentFeeCharges() {
    return repaymentFeeCharges;
  }


  public void setRepaymentFeeCharges(OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges repaymentFeeCharges) {
    
    
    
    this.repaymentFeeCharges = repaymentFeeCharges;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment repaymentFrequency(RepaymentFrequencyEnum repaymentFrequency) {
    
    
    
    
    this.repaymentFrequency = repaymentFrequency;
    return this;
  }

   /**
   * Repayment frequency
   * @return repaymentFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Repayment frequency")

  public RepaymentFrequencyEnum getRepaymentFrequency() {
    return repaymentFrequency;
  }


  public void setRepaymentFrequency(RepaymentFrequencyEnum repaymentFrequency) {
    
    
    
    this.repaymentFrequency = repaymentFrequency;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment repaymentHoliday(List<OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner> repaymentHoliday) {
    
    
    
    
    this.repaymentHoliday = repaymentHoliday;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeRepayment addRepaymentHolidayItem(OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner repaymentHolidayItem) {
    if (this.repaymentHoliday == null) {
      this.repaymentHoliday = new ArrayList<>();
    }
    this.repaymentHoliday.add(repaymentHolidayItem);
    return this;
  }

   /**
   * Get repaymentHoliday
   * @return repaymentHoliday
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner> getRepaymentHoliday() {
    return repaymentHoliday;
  }


  public void setRepaymentHoliday(List<OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner> repaymentHoliday) {
    
    
    
    this.repaymentHoliday = repaymentHoliday;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeRepayment repaymentType(RepaymentTypeEnum repaymentType) {
    
    
    
    
    this.repaymentType = repaymentType;
    return this;
  }

   /**
   * Repayment type
   * @return repaymentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Repayment type")

  public RepaymentTypeEnum getRepaymentType() {
    return repaymentType;
  }


  public void setRepaymentType(RepaymentTypeEnum repaymentType) {
    
    
    
    this.repaymentType = repaymentType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBReadProduct2DataProductInnerOtherProductTypeRepayment instance itself
   */
  public OBReadProduct2DataProductInnerOtherProductTypeRepayment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadProduct2DataProductInnerOtherProductTypeRepayment obReadProduct2DataProductInnerOtherProductTypeRepayment = (OBReadProduct2DataProductInnerOtherProductTypeRepayment) o;
    return Objects.equals(this.amountType, obReadProduct2DataProductInnerOtherProductTypeRepayment.amountType) &&
        Objects.equals(this.notes, obReadProduct2DataProductInnerOtherProductTypeRepayment.notes) &&
        Objects.equals(this.otherAmountType, obReadProduct2DataProductInnerOtherProductTypeRepayment.otherAmountType) &&
        Objects.equals(this.otherRepaymentFrequency, obReadProduct2DataProductInnerOtherProductTypeRepayment.otherRepaymentFrequency) &&
        Objects.equals(this.otherRepaymentType, obReadProduct2DataProductInnerOtherProductTypeRepayment.otherRepaymentType) &&
        Objects.equals(this.repaymentFeeCharges, obReadProduct2DataProductInnerOtherProductTypeRepayment.repaymentFeeCharges) &&
        Objects.equals(this.repaymentFrequency, obReadProduct2DataProductInnerOtherProductTypeRepayment.repaymentFrequency) &&
        Objects.equals(this.repaymentHoliday, obReadProduct2DataProductInnerOtherProductTypeRepayment.repaymentHoliday) &&
        Objects.equals(this.repaymentType, obReadProduct2DataProductInnerOtherProductTypeRepayment.repaymentType)&&
        Objects.equals(this.additionalProperties, obReadProduct2DataProductInnerOtherProductTypeRepayment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountType, notes, otherAmountType, otherRepaymentFrequency, otherRepaymentType, repaymentFeeCharges, repaymentFrequency, repaymentHoliday, repaymentType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadProduct2DataProductInnerOtherProductTypeRepayment {\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherAmountType: ").append(toIndentedString(otherAmountType)).append("\n");
    sb.append("    otherRepaymentFrequency: ").append(toIndentedString(otherRepaymentFrequency)).append("\n");
    sb.append("    otherRepaymentType: ").append(toIndentedString(otherRepaymentType)).append("\n");
    sb.append("    repaymentFeeCharges: ").append(toIndentedString(repaymentFeeCharges)).append("\n");
    sb.append("    repaymentFrequency: ").append(toIndentedString(repaymentFrequency)).append("\n");
    sb.append("    repaymentHoliday: ").append(toIndentedString(repaymentHoliday)).append("\n");
    sb.append("    repaymentType: ").append(toIndentedString(repaymentType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountType");
    openapiFields.add("Notes");
    openapiFields.add("OtherAmountType");
    openapiFields.add("OtherRepaymentFrequency");
    openapiFields.add("OtherRepaymentType");
    openapiFields.add("RepaymentFeeCharges");
    openapiFields.add("RepaymentFrequency");
    openapiFields.add("RepaymentHoliday");
    openapiFields.add("RepaymentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeRepayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBReadProduct2DataProductInnerOtherProductTypeRepayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBReadProduct2DataProductInnerOtherProductTypeRepayment is not found in the empty JSON string", OBReadProduct2DataProductInnerOtherProductTypeRepayment.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("AmountType") != null && !jsonObj.get("AmountType").isJsonNull()) && !jsonObj.get("AmountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AmountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AmountType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // validate the optional field `OtherAmountType`
      if (jsonObj.get("OtherAmountType") != null && !jsonObj.get("OtherAmountType").isJsonNull()) {
        OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherAmountType.validateJsonObject(jsonObj.getAsJsonObject("OtherAmountType"));
      }
      // validate the optional field `OtherRepaymentFrequency`
      if (jsonObj.get("OtherRepaymentFrequency") != null && !jsonObj.get("OtherRepaymentFrequency").isJsonNull()) {
        OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentFrequency.validateJsonObject(jsonObj.getAsJsonObject("OtherRepaymentFrequency"));
      }
      // validate the optional field `OtherRepaymentType`
      if (jsonObj.get("OtherRepaymentType") != null && !jsonObj.get("OtherRepaymentType").isJsonNull()) {
        OBReadProduct2DataProductInnerOtherProductTypeRepaymentOtherRepaymentType.validateJsonObject(jsonObj.getAsJsonObject("OtherRepaymentType"));
      }
      // validate the optional field `RepaymentFeeCharges`
      if (jsonObj.get("RepaymentFeeCharges") != null && !jsonObj.get("RepaymentFeeCharges").isJsonNull()) {
        OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentFeeCharges.validateJsonObject(jsonObj.getAsJsonObject("RepaymentFeeCharges"));
      }
      if ((jsonObj.get("RepaymentFrequency") != null && !jsonObj.get("RepaymentFrequency").isJsonNull()) && !jsonObj.get("RepaymentFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepaymentFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepaymentFrequency").toString()));
      }
      if (jsonObj.get("RepaymentHoliday") != null && !jsonObj.get("RepaymentHoliday").isJsonNull()) {
        JsonArray jsonArrayrepaymentHoliday = jsonObj.getAsJsonArray("RepaymentHoliday");
        if (jsonArrayrepaymentHoliday != null) {
          // ensure the json data is an array
          if (!jsonObj.get("RepaymentHoliday").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `RepaymentHoliday` to be an array in the JSON string but got `%s`", jsonObj.get("RepaymentHoliday").toString()));
          }

          // validate the optional field `RepaymentHoliday` (array)
          for (int i = 0; i < jsonArrayrepaymentHoliday.size(); i++) {
            OBReadProduct2DataProductInnerOtherProductTypeRepaymentRepaymentHolidayInner.validateJsonObject(jsonArrayrepaymentHoliday.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("RepaymentType") != null && !jsonObj.get("RepaymentType").isJsonNull()) && !jsonObj.get("RepaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepaymentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBReadProduct2DataProductInnerOtherProductTypeRepayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBReadProduct2DataProductInnerOtherProductTypeRepayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeRepayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBReadProduct2DataProductInnerOtherProductTypeRepayment.class));

       return (TypeAdapter<T>) new TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeRepayment>() {
           @Override
           public void write(JsonWriter out, OBReadProduct2DataProductInnerOtherProductTypeRepayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBReadProduct2DataProductInnerOtherProductTypeRepayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBReadProduct2DataProductInnerOtherProductTypeRepayment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBReadProduct2DataProductInnerOtherProductTypeRepayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBReadProduct2DataProductInnerOtherProductTypeRepayment
  * @throws IOException if the JSON string is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeRepayment
  */
  public static OBReadProduct2DataProductInnerOtherProductTypeRepayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBReadProduct2DataProductInnerOtherProductTypeRepayment.class);
  }

 /**
  * Convert an instance of OBReadProduct2DataProductInnerOtherProductTypeRepayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

