/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBReadOffer1DataOfferInnerAmount;
import com.konfigthis.client.model.OBReadOffer1DataOfferInnerFee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OBReadOffer1DataOfferInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBReadOffer1DataOfferInner {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private OBReadOffer1DataOfferInnerAmount amount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "EndDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private OffsetDateTime endDateTime;

  public static final String SERIALIZED_NAME_FEE = "Fee";
  @SerializedName(SERIALIZED_NAME_FEE)
  private OBReadOffer1DataOfferInnerFee fee;

  public static final String SERIALIZED_NAME_OFFER_ID = "OfferId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  /**
   * Offer type, in a coded form.
   */
  @JsonAdapter(OfferTypeEnum.Adapter.class)
 public enum OfferTypeEnum {
    BALANCETRANSFER("BalanceTransfer"),
    
    LIMITINCREASE("LimitIncrease"),
    
    MONEYTRANSFER("MoneyTransfer"),
    
    OTHER("Other"),
    
    PROMOTIONALRATE("PromotionalRate");

    private String value;

    OfferTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OfferTypeEnum fromValue(String value) {
      for (OfferTypeEnum b : OfferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OfferTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OfferTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OfferTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OfferTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OFFER_TYPE = "OfferType";
  @SerializedName(SERIALIZED_NAME_OFFER_TYPE)
  private OfferTypeEnum offerType;

  public static final String SERIALIZED_NAME_RATE = "Rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "StartDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public static final String SERIALIZED_NAME_TERM = "Term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_U_R_L = "URL";
  @SerializedName(SERIALIZED_NAME_U_R_L)
  private String URL;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Integer value;

  public OBReadOffer1DataOfferInner() {
  }

  public OBReadOffer1DataOfferInner accountId(String accountId) {
    
    
    if (accountId != null && accountId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountId. Length must be greater than or equal to 1.");
    }
    
    this.accountId = accountId;
    return this;
  }

   /**
   * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    if (accountId != null && accountId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountId. Length must be greater than or equal to 1.");
    }
    this.accountId = accountId;
  }


  public OBReadOffer1DataOfferInner amount(OBReadOffer1DataOfferInnerAmount amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadOffer1DataOfferInnerAmount getAmount() {
    return amount;
  }


  public void setAmount(OBReadOffer1DataOfferInnerAmount amount) {
    
    
    
    this.amount = amount;
  }


  public OBReadOffer1DataOfferInner description(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    
    this.description = description;
    return this;
  }

   /**
   * Further details of the offer.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Further details of the offer.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    if (description != null && description.length() < 1) {
      throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
    }
    this.description = description;
  }


  public OBReadOffer1DataOfferInner endDateTime(OffsetDateTime endDateTime) {
    
    
    
    
    this.endDateTime = endDateTime;
    return this;
  }

   /**
   * Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
   * @return endDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time at which the offer ends.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")

  public OffsetDateTime getEndDateTime() {
    return endDateTime;
  }


  public void setEndDateTime(OffsetDateTime endDateTime) {
    
    
    
    this.endDateTime = endDateTime;
  }


  public OBReadOffer1DataOfferInner fee(OBReadOffer1DataOfferInnerFee fee) {
    
    
    
    
    this.fee = fee;
    return this;
  }

   /**
   * Get fee
   * @return fee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadOffer1DataOfferInnerFee getFee() {
    return fee;
  }


  public void setFee(OBReadOffer1DataOfferInnerFee fee) {
    
    
    
    this.fee = fee;
  }


  public OBReadOffer1DataOfferInner offerId(String offerId) {
    
    
    if (offerId != null && offerId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for offerId. Length must be greater than or equal to 1.");
    }
    
    this.offerId = offerId;
    return this;
  }

   /**
   * A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.
   * @return offerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique and immutable identifier used to identify the offer resource. This identifier has no meaning to the account owner.")

  public String getOfferId() {
    return offerId;
  }


  public void setOfferId(String offerId) {
    
    
    if (offerId != null && offerId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for offerId. Length must be greater than or equal to 1.");
    }
    this.offerId = offerId;
  }


  public OBReadOffer1DataOfferInner offerType(OfferTypeEnum offerType) {
    
    
    
    
    this.offerType = offerType;
    return this;
  }

   /**
   * Offer type, in a coded form.
   * @return offerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Offer type, in a coded form.")

  public OfferTypeEnum getOfferType() {
    return offerType;
  }


  public void setOfferType(OfferTypeEnum offerType) {
    
    
    
    this.offerType = offerType;
  }


  public OBReadOffer1DataOfferInner rate(String rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

   /**
   * Rate associated with the offer type.
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Rate associated with the offer type.")

  public String getRate() {
    return rate;
  }


  public void setRate(String rate) {
    
    
    
    this.rate = rate;
  }


  public OBReadOffer1DataOfferInner startDateTime(OffsetDateTime startDateTime) {
    
    
    
    
    this.startDateTime = startDateTime;
    return this;
  }

   /**
   * Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
   * @return startDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time at which the offer starts.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")

  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }


  public void setStartDateTime(OffsetDateTime startDateTime) {
    
    
    
    this.startDateTime = startDateTime;
  }


  public OBReadOffer1DataOfferInner term(String term) {
    
    
    if (term != null && term.length() < 1) {
      throw new IllegalArgumentException("Invalid value for term. Length must be greater than or equal to 1.");
    }
    
    this.term = term;
    return this;
  }

   /**
   * Further details of the term of the offer.
   * @return term
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Further details of the term of the offer.")

  public String getTerm() {
    return term;
  }


  public void setTerm(String term) {
    
    
    if (term != null && term.length() < 1) {
      throw new IllegalArgumentException("Invalid value for term. Length must be greater than or equal to 1.");
    }
    this.term = term;
  }


  public OBReadOffer1DataOfferInner URL(String URL) {
    
    
    if (URL != null && URL.length() < 1) {
      throw new IllegalArgumentException("Invalid value for URL. Length must be greater than or equal to 1.");
    }
    
    this.URL = URL;
    return this;
  }

   /**
   * URL (Uniform Resource Locator) where documentation on the offer can be found
   * @return URL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL (Uniform Resource Locator) where documentation on the offer can be found")

  public String getURL() {
    return URL;
  }


  public void setURL(String URL) {
    
    
    if (URL != null && URL.length() < 1) {
      throw new IllegalArgumentException("Invalid value for URL. Length must be greater than or equal to 1.");
    }
    this.URL = URL;
  }


  public OBReadOffer1DataOfferInner value(Integer value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * Value associated with the offer type.
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value associated with the offer type.")

  public Integer getValue() {
    return value;
  }


  public void setValue(Integer value) {
    
    
    
    this.value = value;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBReadOffer1DataOfferInner instance itself
   */
  public OBReadOffer1DataOfferInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadOffer1DataOfferInner obReadOffer1DataOfferInner = (OBReadOffer1DataOfferInner) o;
    return Objects.equals(this.accountId, obReadOffer1DataOfferInner.accountId) &&
        Objects.equals(this.amount, obReadOffer1DataOfferInner.amount) &&
        Objects.equals(this.description, obReadOffer1DataOfferInner.description) &&
        Objects.equals(this.endDateTime, obReadOffer1DataOfferInner.endDateTime) &&
        Objects.equals(this.fee, obReadOffer1DataOfferInner.fee) &&
        Objects.equals(this.offerId, obReadOffer1DataOfferInner.offerId) &&
        Objects.equals(this.offerType, obReadOffer1DataOfferInner.offerType) &&
        Objects.equals(this.rate, obReadOffer1DataOfferInner.rate) &&
        Objects.equals(this.startDateTime, obReadOffer1DataOfferInner.startDateTime) &&
        Objects.equals(this.term, obReadOffer1DataOfferInner.term) &&
        Objects.equals(this.URL, obReadOffer1DataOfferInner.URL) &&
        Objects.equals(this.value, obReadOffer1DataOfferInner.value)&&
        Objects.equals(this.additionalProperties, obReadOffer1DataOfferInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, amount, description, endDateTime, fee, offerId, offerType, rate, startDateTime, term, URL, value, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadOffer1DataOfferInner {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    fee: ").append(toIndentedString(fee)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerType: ").append(toIndentedString(offerType)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    URL: ").append(toIndentedString(URL)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("Amount");
    openapiFields.add("Description");
    openapiFields.add("EndDateTime");
    openapiFields.add("Fee");
    openapiFields.add("OfferId");
    openapiFields.add("OfferType");
    openapiFields.add("Rate");
    openapiFields.add("StartDateTime");
    openapiFields.add("Term");
    openapiFields.add("URL");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccountId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBReadOffer1DataOfferInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBReadOffer1DataOfferInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBReadOffer1DataOfferInner is not found in the empty JSON string", OBReadOffer1DataOfferInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBReadOffer1DataOfferInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
      // validate the optional field `Amount`
      if (jsonObj.get("Amount") != null && !jsonObj.get("Amount").isJsonNull()) {
        OBReadOffer1DataOfferInnerAmount.validateJsonObject(jsonObj.getAsJsonObject("Amount"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `Fee`
      if (jsonObj.get("Fee") != null && !jsonObj.get("Fee").isJsonNull()) {
        OBReadOffer1DataOfferInnerFee.validateJsonObject(jsonObj.getAsJsonObject("Fee"));
      }
      if ((jsonObj.get("OfferId") != null && !jsonObj.get("OfferId").isJsonNull()) && !jsonObj.get("OfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferId").toString()));
      }
      if ((jsonObj.get("OfferType") != null && !jsonObj.get("OfferType").isJsonNull()) && !jsonObj.get("OfferType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OfferType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OfferType").toString()));
      }
      if ((jsonObj.get("Rate") != null && !jsonObj.get("Rate").isJsonNull()) && !jsonObj.get("Rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rate").toString()));
      }
      if ((jsonObj.get("Term") != null && !jsonObj.get("Term").isJsonNull()) && !jsonObj.get("Term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Term").toString()));
      }
      if ((jsonObj.get("URL") != null && !jsonObj.get("URL").isJsonNull()) && !jsonObj.get("URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("URL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBReadOffer1DataOfferInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBReadOffer1DataOfferInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBReadOffer1DataOfferInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBReadOffer1DataOfferInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OBReadOffer1DataOfferInner>() {
           @Override
           public void write(JsonWriter out, OBReadOffer1DataOfferInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBReadOffer1DataOfferInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBReadOffer1DataOfferInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBReadOffer1DataOfferInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBReadOffer1DataOfferInner
  * @throws IOException if the JSON string is invalid with respect to OBReadOffer1DataOfferInner
  */
  public static OBReadOffer1DataOfferInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBReadOffer1DataOfferInner.class);
  }

 /**
  * Convert an instance of OBReadOffer1DataOfferInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

