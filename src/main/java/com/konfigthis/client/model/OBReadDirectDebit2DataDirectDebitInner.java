/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBActiveOrHistoricCurrencyAndAmount0;
import com.konfigthis.client.model.OBExternalDirectDebitStatus1Code;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Account to or from which a cash entry is made.
 */
@ApiModel(description = "Account to or from which a cash entry is made.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBReadDirectDebit2DataDirectDebitInner {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "AccountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_ID = "DirectDebitId";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_ID)
  private String directDebitId;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_STATUS_CODE = "DirectDebitStatusCode";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_STATUS_CODE)
  private OBExternalDirectDebitStatus1Code directDebitStatusCode;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private String frequency;

  public static final String SERIALIZED_NAME_MANDATE_IDENTIFICATION = "MandateIdentification";
  @SerializedName(SERIALIZED_NAME_MANDATE_IDENTIFICATION)
  private String mandateIdentification;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIOUS_PAYMENT_AMOUNT = "PreviousPaymentAmount";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_PAYMENT_AMOUNT)
  private OBActiveOrHistoricCurrencyAndAmount0 previousPaymentAmount;

  public static final String SERIALIZED_NAME_PREVIOUS_PAYMENT_DATE_TIME = "PreviousPaymentDateTime";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_PAYMENT_DATE_TIME)
  private OffsetDateTime previousPaymentDateTime;

  public OBReadDirectDebit2DataDirectDebitInner() {
  }

  public OBReadDirectDebit2DataDirectDebitInner accountId(String accountId) {
    
    
    if (accountId != null && accountId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountId. Length must be greater than or equal to 1.");
    }
    
    this.accountId = accountId;
    return this;
  }

   /**
   * A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A unique and immutable identifier used to identify the account resource. This identifier has no meaning to the account owner.")

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    
    
    if (accountId != null && accountId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountId. Length must be greater than or equal to 1.");
    }
    this.accountId = accountId;
  }


  public OBReadDirectDebit2DataDirectDebitInner directDebitId(String directDebitId) {
    
    
    if (directDebitId != null && directDebitId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for directDebitId. Length must be greater than or equal to 1.");
    }
    
    this.directDebitId = directDebitId;
    return this;
  }

   /**
   * A unique and immutable identifier used to identify the direct debit resource. This identifier has no meaning to the account owner.
   * @return directDebitId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A unique and immutable identifier used to identify the direct debit resource. This identifier has no meaning to the account owner.")

  public String getDirectDebitId() {
    return directDebitId;
  }


  public void setDirectDebitId(String directDebitId) {
    
    
    if (directDebitId != null && directDebitId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for directDebitId. Length must be greater than or equal to 1.");
    }
    this.directDebitId = directDebitId;
  }


  public OBReadDirectDebit2DataDirectDebitInner directDebitStatusCode(OBExternalDirectDebitStatus1Code directDebitStatusCode) {
    
    
    
    
    this.directDebitStatusCode = directDebitStatusCode;
    return this;
  }

   /**
   * Get directDebitStatusCode
   * @return directDebitStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBExternalDirectDebitStatus1Code getDirectDebitStatusCode() {
    return directDebitStatusCode;
  }


  public void setDirectDebitStatusCode(OBExternalDirectDebitStatus1Code directDebitStatusCode) {
    
    
    
    this.directDebitStatusCode = directDebitStatusCode;
  }


  public OBReadDirectDebit2DataDirectDebitInner frequency(String frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Regularity with which direct debit instructions are to be created and processed.
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Regularity with which direct debit instructions are to be created and processed.")

  public String getFrequency() {
    return frequency;
  }


  public void setFrequency(String frequency) {
    
    
    
    this.frequency = frequency;
  }


  public OBReadDirectDebit2DataDirectDebitInner mandateIdentification(String mandateIdentification) {
    
    
    if (mandateIdentification != null && mandateIdentification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mandateIdentification. Length must be greater than or equal to 1.");
    }
    
    this.mandateIdentification = mandateIdentification;
    return this;
  }

   /**
   * Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.
   * @return mandateIdentification
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Direct Debit reference. For AUDDIS service users provide Core Reference. For non AUDDIS service users provide Core reference if possible or last used reference.")

  public String getMandateIdentification() {
    return mandateIdentification;
  }


  public void setMandateIdentification(String mandateIdentification) {
    
    
    if (mandateIdentification != null && mandateIdentification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for mandateIdentification. Length must be greater than or equal to 1.");
    }
    this.mandateIdentification = mandateIdentification;
  }


  public OBReadDirectDebit2DataDirectDebitInner name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Name of Service User.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of Service User.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public OBReadDirectDebit2DataDirectDebitInner previousPaymentAmount(OBActiveOrHistoricCurrencyAndAmount0 previousPaymentAmount) {
    
    
    
    
    this.previousPaymentAmount = previousPaymentAmount;
    return this;
  }

   /**
   * Get previousPaymentAmount
   * @return previousPaymentAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBActiveOrHistoricCurrencyAndAmount0 getPreviousPaymentAmount() {
    return previousPaymentAmount;
  }


  public void setPreviousPaymentAmount(OBActiveOrHistoricCurrencyAndAmount0 previousPaymentAmount) {
    
    
    
    this.previousPaymentAmount = previousPaymentAmount;
  }


  public OBReadDirectDebit2DataDirectDebitInner previousPaymentDateTime(OffsetDateTime previousPaymentDateTime) {
    
    
    
    
    this.previousPaymentDateTime = previousPaymentDateTime;
    return this;
  }

   /**
   * Date of most recent direct debit collection.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00
   * @return previousPaymentDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of most recent direct debit collection.All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00")

  public OffsetDateTime getPreviousPaymentDateTime() {
    return previousPaymentDateTime;
  }


  public void setPreviousPaymentDateTime(OffsetDateTime previousPaymentDateTime) {
    
    
    
    this.previousPaymentDateTime = previousPaymentDateTime;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBReadDirectDebit2DataDirectDebitInner instance itself
   */
  public OBReadDirectDebit2DataDirectDebitInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadDirectDebit2DataDirectDebitInner obReadDirectDebit2DataDirectDebitInner = (OBReadDirectDebit2DataDirectDebitInner) o;
    return Objects.equals(this.accountId, obReadDirectDebit2DataDirectDebitInner.accountId) &&
        Objects.equals(this.directDebitId, obReadDirectDebit2DataDirectDebitInner.directDebitId) &&
        Objects.equals(this.directDebitStatusCode, obReadDirectDebit2DataDirectDebitInner.directDebitStatusCode) &&
        Objects.equals(this.frequency, obReadDirectDebit2DataDirectDebitInner.frequency) &&
        Objects.equals(this.mandateIdentification, obReadDirectDebit2DataDirectDebitInner.mandateIdentification) &&
        Objects.equals(this.name, obReadDirectDebit2DataDirectDebitInner.name) &&
        Objects.equals(this.previousPaymentAmount, obReadDirectDebit2DataDirectDebitInner.previousPaymentAmount) &&
        Objects.equals(this.previousPaymentDateTime, obReadDirectDebit2DataDirectDebitInner.previousPaymentDateTime)&&
        Objects.equals(this.additionalProperties, obReadDirectDebit2DataDirectDebitInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, directDebitId, directDebitStatusCode, frequency, mandateIdentification, name, previousPaymentAmount, previousPaymentDateTime, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadDirectDebit2DataDirectDebitInner {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    directDebitId: ").append(toIndentedString(directDebitId)).append("\n");
    sb.append("    directDebitStatusCode: ").append(toIndentedString(directDebitStatusCode)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    mandateIdentification: ").append(toIndentedString(mandateIdentification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previousPaymentAmount: ").append(toIndentedString(previousPaymentAmount)).append("\n");
    sb.append("    previousPaymentDateTime: ").append(toIndentedString(previousPaymentDateTime)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountId");
    openapiFields.add("DirectDebitId");
    openapiFields.add("DirectDebitStatusCode");
    openapiFields.add("Frequency");
    openapiFields.add("MandateIdentification");
    openapiFields.add("Name");
    openapiFields.add("PreviousPaymentAmount");
    openapiFields.add("PreviousPaymentDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccountId");
    openapiRequiredFields.add("MandateIdentification");
    openapiRequiredFields.add("Name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBReadDirectDebit2DataDirectDebitInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBReadDirectDebit2DataDirectDebitInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBReadDirectDebit2DataDirectDebitInner is not found in the empty JSON string", OBReadDirectDebit2DataDirectDebitInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBReadDirectDebit2DataDirectDebitInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountId").toString()));
      }
      if ((jsonObj.get("DirectDebitId") != null && !jsonObj.get("DirectDebitId").isJsonNull()) && !jsonObj.get("DirectDebitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectDebitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectDebitId").toString()));
      }
      if ((jsonObj.get("Frequency") != null && !jsonObj.get("Frequency").isJsonNull()) && !jsonObj.get("Frequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Frequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Frequency").toString()));
      }
      if (!jsonObj.get("MandateIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MandateIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MandateIdentification").toString()));
      }
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `PreviousPaymentAmount`
      if (jsonObj.get("PreviousPaymentAmount") != null && !jsonObj.get("PreviousPaymentAmount").isJsonNull()) {
        OBActiveOrHistoricCurrencyAndAmount0.validateJsonObject(jsonObj.getAsJsonObject("PreviousPaymentAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBReadDirectDebit2DataDirectDebitInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBReadDirectDebit2DataDirectDebitInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBReadDirectDebit2DataDirectDebitInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBReadDirectDebit2DataDirectDebitInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OBReadDirectDebit2DataDirectDebitInner>() {
           @Override
           public void write(JsonWriter out, OBReadDirectDebit2DataDirectDebitInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBReadDirectDebit2DataDirectDebitInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBReadDirectDebit2DataDirectDebitInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBReadDirectDebit2DataDirectDebitInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBReadDirectDebit2DataDirectDebitInner
  * @throws IOException if the JSON string is invalid with respect to OBReadDirectDebit2DataDirectDebitInner
  */
  public static OBReadDirectDebit2DataDirectDebitInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBReadDirectDebit2DataDirectDebitInner.class);
  }

 /**
  * Convert an instance of OBReadDirectDebit2DataDirectDebitInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

