/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OtherApplicationFrequencyProperty;
import com.konfigthis.client.model.OtherBankInterestTypeProperty;
import com.konfigthis.client.model.OtherCalculationFrequencyProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Tier Band Details
 */
@ApiModel(description = "Tier Band Details")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TierBandPropertyInner {
  public static final String SERIALIZED_NAME_A_E_R = "AER";
  @SerializedName(SERIALIZED_NAME_A_E_R)
  private String AER;

  /**
   * How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer&#39;s BCA.
   */
  @JsonAdapter(ApplicationFrequencyEnum.Adapter.class)
 public enum ApplicationFrequencyEnum {
    DAILY("Daily"),
    
    HALFYEARLY("HalfYearly"),
    
    MONTHLY("Monthly"),
    
    OTHER("Other"),
    
    QUARTERLY("Quarterly"),
    
    PERSTATEMENTDATE("PerStatementDate"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    ApplicationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApplicationFrequencyEnum fromValue(String value) {
      for (ApplicationFrequencyEnum b : ApplicationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApplicationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApplicationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApplicationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApplicationFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPLICATION_FREQUENCY = "ApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_APPLICATION_FREQUENCY)
  private ApplicationFrequencyEnum applicationFrequency;

  public static final String SERIALIZED_NAME_BANK_INTEREST_RATE = "BankInterestRate";
  @SerializedName(SERIALIZED_NAME_BANK_INTEREST_RATE)
  private String bankInterestRate;

  /**
   * Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
   */
  @JsonAdapter(BankInterestRateTypeEnum.Adapter.class)
 public enum BankInterestRateTypeEnum {
    GROSS("Gross"),
    
    OTHER("Other");

    private String value;

    BankInterestRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BankInterestRateTypeEnum fromValue(String value) {
      for (BankInterestRateTypeEnum b : BankInterestRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BankInterestRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BankInterestRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BankInterestRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BankInterestRateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BANK_INTEREST_RATE_TYPE = "BankInterestRateType";
  @SerializedName(SERIALIZED_NAME_BANK_INTEREST_RATE_TYPE)
  private BankInterestRateTypeEnum bankInterestRateType;

  /**
   * How often is credit interest calculated for the account.
   */
  @JsonAdapter(CalculationFrequencyEnum.Adapter.class)
 public enum CalculationFrequencyEnum {
    DAILY("Daily"),
    
    HALFYEARLY("HalfYearly"),
    
    MONTHLY("Monthly"),
    
    OTHER("Other"),
    
    QUARTERLY("Quarterly"),
    
    PERSTATEMENTDATE("PerStatementDate"),
    
    WEEKLY("Weekly"),
    
    YEARLY("Yearly");

    private String value;

    CalculationFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationFrequencyEnum fromValue(String value) {
      for (CalculationFrequencyEnum b : CalculationFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationFrequencyEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_FREQUENCY = "CalculationFrequency";
  @SerializedName(SERIALIZED_NAME_CALCULATION_FREQUENCY)
  private CalculationFrequencyEnum calculationFrequency;

  /**
   * Amount on which Interest applied.
   */
  @JsonAdapter(DepositInterestAppliedCoverageEnum.Adapter.class)
 public enum DepositInterestAppliedCoverageEnum {
    BANDED("Banded"),
    
    TIERED("Tiered"),
    
    WHOLE("Whole");

    private String value;

    DepositInterestAppliedCoverageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepositInterestAppliedCoverageEnum fromValue(String value) {
      for (DepositInterestAppliedCoverageEnum b : DepositInterestAppliedCoverageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepositInterestAppliedCoverageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepositInterestAppliedCoverageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepositInterestAppliedCoverageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepositInterestAppliedCoverageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPOSIT_INTEREST_APPLIED_COVERAGE = "DepositInterestAppliedCoverage";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_INTEREST_APPLIED_COVERAGE)
  private DepositInterestAppliedCoverageEnum depositInterestAppliedCoverage;

  /**
   * Type of interest rate, Fixed or Variable
   */
  @JsonAdapter(FixedVariableInterestRateTypeEnum.Adapter.class)
 public enum FixedVariableInterestRateTypeEnum {
    FIXED("Fixed"),
    
    VARIABLE("Variable");

    private String value;

    FixedVariableInterestRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FixedVariableInterestRateTypeEnum fromValue(String value) {
      for (FixedVariableInterestRateTypeEnum b : FixedVariableInterestRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FixedVariableInterestRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FixedVariableInterestRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FixedVariableInterestRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FixedVariableInterestRateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE = "FixedVariableInterestRateType";
  @SerializedName(SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE)
  private FixedVariableInterestRateTypeEnum fixedVariableInterestRateType;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY = "OtherApplicationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_APPLICATION_FREQUENCY)
  private OtherApplicationFrequencyProperty otherApplicationFrequency;

  public static final String SERIALIZED_NAME_OTHER_BANK_INTEREST_TYPE = "OtherBankInterestType";
  @SerializedName(SERIALIZED_NAME_OTHER_BANK_INTEREST_TYPE)
  private OtherBankInterestTypeProperty otherBankInterestType;

  public static final String SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY = "OtherCalculationFrequency";
  @SerializedName(SERIALIZED_NAME_OTHER_CALCULATION_FREQUENCY)
  private OtherCalculationFrequencyProperty otherCalculationFrequency;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAXIMUM = "TierValueMaximum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAXIMUM)
  private String tierValueMaximum;

  public static final String SERIALIZED_NAME_TIER_VALUE_MINIMUM = "TierValueMinimum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MINIMUM)
  private String tierValueMinimum;

  public TierBandPropertyInner() {
  }

  public TierBandPropertyInner AER(String AER) {
    
    
    
    
    this.AER = AER;
    return this;
  }

   /**
   * The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.   Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A
   * @return AER
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.   Read more: Annual Equivalent Rate (AER) http://www.investopedia.com/terms/a/aer.asp#ixzz4gfR7IO1A")

  public String getAER() {
    return AER;
  }


  public void setAER(String AER) {
    
    
    
    this.AER = AER;
  }


  public TierBandPropertyInner applicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    
    
    
    
    this.applicationFrequency = applicationFrequency;
    return this;
  }

   /**
   * How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer&#39;s BCA.
   * @return applicationFrequency
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "How often is interest applied to the BCA for this tier/band i.e. how often the financial institution pays accumulated interest to the customer's BCA.")

  public ApplicationFrequencyEnum getApplicationFrequency() {
    return applicationFrequency;
  }


  public void setApplicationFrequency(ApplicationFrequencyEnum applicationFrequency) {
    
    
    
    this.applicationFrequency = applicationFrequency;
  }


  public TierBandPropertyInner bankInterestRate(String bankInterestRate) {
    
    
    
    
    this.bankInterestRate = bankInterestRate;
    return this;
  }

   /**
   * Bank Interest for the BCA product
   * @return bankInterestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Bank Interest for the BCA product")

  public String getBankInterestRate() {
    return bankInterestRate;
  }


  public void setBankInterestRate(String bankInterestRate) {
    
    
    
    this.bankInterestRate = bankInterestRate;
  }


  public TierBandPropertyInner bankInterestRateType(BankInterestRateTypeEnum bankInterestRateType) {
    
    
    
    
    this.bankInterestRateType = bankInterestRateType;
    return this;
  }

   /**
   * Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.
   * @return bankInterestRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest rate types, other than AER, which financial institutions may use to describe the annual interest rate payable to the BCA.")

  public BankInterestRateTypeEnum getBankInterestRateType() {
    return bankInterestRateType;
  }


  public void setBankInterestRateType(BankInterestRateTypeEnum bankInterestRateType) {
    
    
    
    this.bankInterestRateType = bankInterestRateType;
  }


  public TierBandPropertyInner calculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    
    
    
    
    this.calculationFrequency = calculationFrequency;
    return this;
  }

   /**
   * How often is credit interest calculated for the account.
   * @return calculationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How often is credit interest calculated for the account.")

  public CalculationFrequencyEnum getCalculationFrequency() {
    return calculationFrequency;
  }


  public void setCalculationFrequency(CalculationFrequencyEnum calculationFrequency) {
    
    
    
    this.calculationFrequency = calculationFrequency;
  }


  public TierBandPropertyInner depositInterestAppliedCoverage(DepositInterestAppliedCoverageEnum depositInterestAppliedCoverage) {
    
    
    
    
    this.depositInterestAppliedCoverage = depositInterestAppliedCoverage;
    return this;
  }

   /**
   * Amount on which Interest applied.
   * @return depositInterestAppliedCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount on which Interest applied.")

  public DepositInterestAppliedCoverageEnum getDepositInterestAppliedCoverage() {
    return depositInterestAppliedCoverage;
  }


  public void setDepositInterestAppliedCoverage(DepositInterestAppliedCoverageEnum depositInterestAppliedCoverage) {
    
    
    
    this.depositInterestAppliedCoverage = depositInterestAppliedCoverage;
  }


  public TierBandPropertyInner fixedVariableInterestRateType(FixedVariableInterestRateTypeEnum fixedVariableInterestRateType) {
    
    
    
    
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
    return this;
  }

   /**
   * Type of interest rate, Fixed or Variable
   * @return fixedVariableInterestRateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Type of interest rate, Fixed or Variable")

  public FixedVariableInterestRateTypeEnum getFixedVariableInterestRateType() {
    return fixedVariableInterestRateType;
  }


  public void setFixedVariableInterestRateType(FixedVariableInterestRateTypeEnum fixedVariableInterestRateType) {
    
    
    
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
  }


  public TierBandPropertyInner identification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a BCA.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a BCA.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    this.identification = identification;
  }


  public TierBandPropertyInner notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public TierBandPropertyInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Optional additional notes to supplement the Tier Band details
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional additional notes to supplement the Tier Band details")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public TierBandPropertyInner otherApplicationFrequency(OtherApplicationFrequencyProperty otherApplicationFrequency) {
    
    
    
    
    this.otherApplicationFrequency = otherApplicationFrequency;
    return this;
  }

   /**
   * Get otherApplicationFrequency
   * @return otherApplicationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherApplicationFrequencyProperty getOtherApplicationFrequency() {
    return otherApplicationFrequency;
  }


  public void setOtherApplicationFrequency(OtherApplicationFrequencyProperty otherApplicationFrequency) {
    
    
    
    this.otherApplicationFrequency = otherApplicationFrequency;
  }


  public TierBandPropertyInner otherBankInterestType(OtherBankInterestTypeProperty otherBankInterestType) {
    
    
    
    
    this.otherBankInterestType = otherBankInterestType;
    return this;
  }

   /**
   * Get otherBankInterestType
   * @return otherBankInterestType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherBankInterestTypeProperty getOtherBankInterestType() {
    return otherBankInterestType;
  }


  public void setOtherBankInterestType(OtherBankInterestTypeProperty otherBankInterestType) {
    
    
    
    this.otherBankInterestType = otherBankInterestType;
  }


  public TierBandPropertyInner otherCalculationFrequency(OtherCalculationFrequencyProperty otherCalculationFrequency) {
    
    
    
    
    this.otherCalculationFrequency = otherCalculationFrequency;
    return this;
  }

   /**
   * Get otherCalculationFrequency
   * @return otherCalculationFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OtherCalculationFrequencyProperty getOtherCalculationFrequency() {
    return otherCalculationFrequency;
  }


  public void setOtherCalculationFrequency(OtherCalculationFrequencyProperty otherCalculationFrequency) {
    
    
    
    this.otherCalculationFrequency = otherCalculationFrequency;
  }


  public TierBandPropertyInner tierValueMaximum(String tierValueMaximum) {
    
    
    
    
    this.tierValueMaximum = tierValueMaximum;
    return this;
  }

   /**
   * Maximum deposit value for which the credit interest tier applies.
   * @return tierValueMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum deposit value for which the credit interest tier applies.")

  public String getTierValueMaximum() {
    return tierValueMaximum;
  }


  public void setTierValueMaximum(String tierValueMaximum) {
    
    
    
    this.tierValueMaximum = tierValueMaximum;
  }


  public TierBandPropertyInner tierValueMinimum(String tierValueMinimum) {
    
    
    
    
    this.tierValueMinimum = tierValueMinimum;
    return this;
  }

   /**
   * Minimum deposit value for which the credit interest tier applies.
   * @return tierValueMinimum
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum deposit value for which the credit interest tier applies.")

  public String getTierValueMinimum() {
    return tierValueMinimum;
  }


  public void setTierValueMinimum(String tierValueMinimum) {
    
    
    
    this.tierValueMinimum = tierValueMinimum;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TierBandPropertyInner instance itself
   */
  public TierBandPropertyInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TierBandPropertyInner tierBandPropertyInner = (TierBandPropertyInner) o;
    return Objects.equals(this.AER, tierBandPropertyInner.AER) &&
        Objects.equals(this.applicationFrequency, tierBandPropertyInner.applicationFrequency) &&
        Objects.equals(this.bankInterestRate, tierBandPropertyInner.bankInterestRate) &&
        Objects.equals(this.bankInterestRateType, tierBandPropertyInner.bankInterestRateType) &&
        Objects.equals(this.calculationFrequency, tierBandPropertyInner.calculationFrequency) &&
        Objects.equals(this.depositInterestAppliedCoverage, tierBandPropertyInner.depositInterestAppliedCoverage) &&
        Objects.equals(this.fixedVariableInterestRateType, tierBandPropertyInner.fixedVariableInterestRateType) &&
        Objects.equals(this.identification, tierBandPropertyInner.identification) &&
        Objects.equals(this.notes, tierBandPropertyInner.notes) &&
        Objects.equals(this.otherApplicationFrequency, tierBandPropertyInner.otherApplicationFrequency) &&
        Objects.equals(this.otherBankInterestType, tierBandPropertyInner.otherBankInterestType) &&
        Objects.equals(this.otherCalculationFrequency, tierBandPropertyInner.otherCalculationFrequency) &&
        Objects.equals(this.tierValueMaximum, tierBandPropertyInner.tierValueMaximum) &&
        Objects.equals(this.tierValueMinimum, tierBandPropertyInner.tierValueMinimum)&&
        Objects.equals(this.additionalProperties, tierBandPropertyInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(AER, applicationFrequency, bankInterestRate, bankInterestRateType, calculationFrequency, depositInterestAppliedCoverage, fixedVariableInterestRateType, identification, notes, otherApplicationFrequency, otherBankInterestType, otherCalculationFrequency, tierValueMaximum, tierValueMinimum, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TierBandPropertyInner {\n");
    sb.append("    AER: ").append(toIndentedString(AER)).append("\n");
    sb.append("    applicationFrequency: ").append(toIndentedString(applicationFrequency)).append("\n");
    sb.append("    bankInterestRate: ").append(toIndentedString(bankInterestRate)).append("\n");
    sb.append("    bankInterestRateType: ").append(toIndentedString(bankInterestRateType)).append("\n");
    sb.append("    calculationFrequency: ").append(toIndentedString(calculationFrequency)).append("\n");
    sb.append("    depositInterestAppliedCoverage: ").append(toIndentedString(depositInterestAppliedCoverage)).append("\n");
    sb.append("    fixedVariableInterestRateType: ").append(toIndentedString(fixedVariableInterestRateType)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherApplicationFrequency: ").append(toIndentedString(otherApplicationFrequency)).append("\n");
    sb.append("    otherBankInterestType: ").append(toIndentedString(otherBankInterestType)).append("\n");
    sb.append("    otherCalculationFrequency: ").append(toIndentedString(otherCalculationFrequency)).append("\n");
    sb.append("    tierValueMaximum: ").append(toIndentedString(tierValueMaximum)).append("\n");
    sb.append("    tierValueMinimum: ").append(toIndentedString(tierValueMinimum)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AER");
    openapiFields.add("ApplicationFrequency");
    openapiFields.add("BankInterestRate");
    openapiFields.add("BankInterestRateType");
    openapiFields.add("CalculationFrequency");
    openapiFields.add("DepositInterestAppliedCoverage");
    openapiFields.add("FixedVariableInterestRateType");
    openapiFields.add("Identification");
    openapiFields.add("Notes");
    openapiFields.add("OtherApplicationFrequency");
    openapiFields.add("OtherBankInterestType");
    openapiFields.add("OtherCalculationFrequency");
    openapiFields.add("TierValueMaximum");
    openapiFields.add("TierValueMinimum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AER");
    openapiRequiredFields.add("ApplicationFrequency");
    openapiRequiredFields.add("FixedVariableInterestRateType");
    openapiRequiredFields.add("TierValueMinimum");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TierBandPropertyInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TierBandPropertyInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TierBandPropertyInner is not found in the empty JSON string", TierBandPropertyInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TierBandPropertyInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AER").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AER` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AER").toString()));
      }
      if (!jsonObj.get("ApplicationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApplicationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApplicationFrequency").toString()));
      }
      if ((jsonObj.get("BankInterestRate") != null && !jsonObj.get("BankInterestRate").isJsonNull()) && !jsonObj.get("BankInterestRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankInterestRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankInterestRate").toString()));
      }
      if ((jsonObj.get("BankInterestRateType") != null && !jsonObj.get("BankInterestRateType").isJsonNull()) && !jsonObj.get("BankInterestRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankInterestRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankInterestRateType").toString()));
      }
      if ((jsonObj.get("CalculationFrequency") != null && !jsonObj.get("CalculationFrequency").isJsonNull()) && !jsonObj.get("CalculationFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CalculationFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CalculationFrequency").toString()));
      }
      if ((jsonObj.get("DepositInterestAppliedCoverage") != null && !jsonObj.get("DepositInterestAppliedCoverage").isJsonNull()) && !jsonObj.get("DepositInterestAppliedCoverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepositInterestAppliedCoverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepositInterestAppliedCoverage").toString()));
      }
      if (!jsonObj.get("FixedVariableInterestRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FixedVariableInterestRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FixedVariableInterestRateType").toString()));
      }
      if ((jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) && !jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // validate the optional field `OtherApplicationFrequency`
      if (jsonObj.get("OtherApplicationFrequency") != null && !jsonObj.get("OtherApplicationFrequency").isJsonNull()) {
        OtherApplicationFrequencyProperty.validateJsonObject(jsonObj.getAsJsonObject("OtherApplicationFrequency"));
      }
      // validate the optional field `OtherBankInterestType`
      if (jsonObj.get("OtherBankInterestType") != null && !jsonObj.get("OtherBankInterestType").isJsonNull()) {
        OtherBankInterestTypeProperty.validateJsonObject(jsonObj.getAsJsonObject("OtherBankInterestType"));
      }
      // validate the optional field `OtherCalculationFrequency`
      if (jsonObj.get("OtherCalculationFrequency") != null && !jsonObj.get("OtherCalculationFrequency").isJsonNull()) {
        OtherCalculationFrequencyProperty.validateJsonObject(jsonObj.getAsJsonObject("OtherCalculationFrequency"));
      }
      if ((jsonObj.get("TierValueMaximum") != null && !jsonObj.get("TierValueMaximum").isJsonNull()) && !jsonObj.get("TierValueMaximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMaximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMaximum").toString()));
      }
      if (!jsonObj.get("TierValueMinimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMinimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMinimum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TierBandPropertyInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TierBandPropertyInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TierBandPropertyInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TierBandPropertyInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TierBandPropertyInner>() {
           @Override
           public void write(JsonWriter out, TierBandPropertyInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TierBandPropertyInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TierBandPropertyInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TierBandPropertyInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TierBandPropertyInner
  * @throws IOException if the JSON string is invalid with respect to TierBandPropertyInner
  */
  public static TierBandPropertyInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TierBandPropertyInner.class);
  }

 /**
  * Convert an instance of TierBandPropertyInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

