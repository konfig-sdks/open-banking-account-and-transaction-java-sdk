/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OverdraftFeesChargesPropertyInner;
import com.konfigthis.client.model.OverdraftTierBandPropertyInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Tier band set details
 */
@ApiModel(description = "Tier band set details")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OverdraftTierBandSetPropertyInner {
  public static final String SERIALIZED_NAME_AUTHORISED_INDICATOR = "AuthorisedIndicator";
  @SerializedName(SERIALIZED_NAME_AUTHORISED_INDICATOR)
  private Boolean authorisedIndicator;

  public static final String SERIALIZED_NAME_BUFFER_AMOUNT = "BufferAmount";
  @SerializedName(SERIALIZED_NAME_BUFFER_AMOUNT)
  private String bufferAmount;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES = "OverdraftFeesCharges";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES)
  private List<OverdraftFeesChargesPropertyInner> overdraftFeesCharges = null;

  public static final String SERIALIZED_NAME_OVERDRAFT_TIER_BAND = "OverdraftTierBand";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_TIER_BAND)
  private List<OverdraftTierBandPropertyInner> overdraftTierBand = new ArrayList<>();

  /**
   * An overdraft can either be &#39;committed&#39; which means that the facility cannot be withdrawn without reasonable notification before it&#39;s agreed end date, or &#39;on demand&#39; which means that the financial institution can demand repayment at any point in time.
   */
  @JsonAdapter(OverdraftTypeEnum.Adapter.class)
 public enum OverdraftTypeEnum {
    COMMITTED("Committed"),
    
    ONDEMAND("OnDemand");

    private String value;

    OverdraftTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverdraftTypeEnum fromValue(String value) {
      for (OverdraftTypeEnum b : OverdraftTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverdraftTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverdraftTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverdraftTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverdraftTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OVERDRAFT_TYPE = "OverdraftType";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_TYPE)
  private OverdraftTypeEnum overdraftType;

  /**
   * The methodology of how overdraft is charged. It can be: &#39;Whole&#39;  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).  &#39;Tiered&#39; Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation &#39;Banded&#39; Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
   */
  @JsonAdapter(TierBandMethodEnum.Adapter.class)
 public enum TierBandMethodEnum {
    BANDED("Banded"),
    
    TIERED("Tiered"),
    
    WHOLE("Whole");

    private String value;

    TierBandMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierBandMethodEnum fromValue(String value) {
      for (TierBandMethodEnum b : TierBandMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierBandMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierBandMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierBandMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierBandMethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIER_BAND_METHOD = "TierBandMethod";
  @SerializedName(SERIALIZED_NAME_TIER_BAND_METHOD)
  private TierBandMethodEnum tierBandMethod;

  public OverdraftTierBandSetPropertyInner() {
  }

  public OverdraftTierBandSetPropertyInner authorisedIndicator(Boolean authorisedIndicator) {
    
    
    
    
    this.authorisedIndicator = authorisedIndicator;
    return this;
  }

   /**
   * Indicates if the Overdraft is authorised (Y) or unauthorised (N)
   * @return authorisedIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the Overdraft is authorised (Y) or unauthorised (N)")

  public Boolean getAuthorisedIndicator() {
    return authorisedIndicator;
  }


  public void setAuthorisedIndicator(Boolean authorisedIndicator) {
    
    
    
    this.authorisedIndicator = authorisedIndicator;
  }


  public OverdraftTierBandSetPropertyInner bufferAmount(String bufferAmount) {
    
    
    
    
    this.bufferAmount = bufferAmount;
    return this;
  }

   /**
   * When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.
   * @return bufferAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When a customer exceeds their credit limit, a financial institution will not charge the customer unauthorised overdraft charges if they do not exceed by more than the buffer amount. Note: Authorised overdraft charges may still apply.")

  public String getBufferAmount() {
    return bufferAmount;
  }


  public void setBufferAmount(String bufferAmount) {
    
    
    
    this.bufferAmount = bufferAmount;
  }


  public OverdraftTierBandSetPropertyInner identification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a overdraft product.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a overdraft product.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    this.identification = identification;
  }


  public OverdraftTierBandSetPropertyInner notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public OverdraftTierBandSetPropertyInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Optional additional notes to supplement the overdraft Tier Band Set details
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional additional notes to supplement the overdraft Tier Band Set details")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public OverdraftTierBandSetPropertyInner overdraftFeesCharges(List<OverdraftFeesChargesPropertyInner> overdraftFeesCharges) {
    
    
    
    
    this.overdraftFeesCharges = overdraftFeesCharges;
    return this;
  }

  public OverdraftTierBandSetPropertyInner addOverdraftFeesChargesItem(OverdraftFeesChargesPropertyInner overdraftFeesChargesItem) {
    if (this.overdraftFeesCharges == null) {
      this.overdraftFeesCharges = new ArrayList<>();
    }
    this.overdraftFeesCharges.add(overdraftFeesChargesItem);
    return this;
  }

   /**
   * Overdraft fees and charges details
   * @return overdraftFeesCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overdraft fees and charges details")

  public List<OverdraftFeesChargesPropertyInner> getOverdraftFeesCharges() {
    return overdraftFeesCharges;
  }


  public void setOverdraftFeesCharges(List<OverdraftFeesChargesPropertyInner> overdraftFeesCharges) {
    
    
    
    this.overdraftFeesCharges = overdraftFeesCharges;
  }


  public OverdraftTierBandSetPropertyInner overdraftTierBand(List<OverdraftTierBandPropertyInner> overdraftTierBand) {
    
    
    
    
    this.overdraftTierBand = overdraftTierBand;
    return this;
  }

  public OverdraftTierBandSetPropertyInner addOverdraftTierBandItem(OverdraftTierBandPropertyInner overdraftTierBandItem) {
    this.overdraftTierBand.add(overdraftTierBandItem);
    return this;
  }

   /**
   * Provides overdraft details for a specific tier or band
   * @return overdraftTierBand
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Provides overdraft details for a specific tier or band")

  public List<OverdraftTierBandPropertyInner> getOverdraftTierBand() {
    return overdraftTierBand;
  }


  public void setOverdraftTierBand(List<OverdraftTierBandPropertyInner> overdraftTierBand) {
    
    
    
    this.overdraftTierBand = overdraftTierBand;
  }


  public OverdraftTierBandSetPropertyInner overdraftType(OverdraftTypeEnum overdraftType) {
    
    
    
    
    this.overdraftType = overdraftType;
    return this;
  }

   /**
   * An overdraft can either be &#39;committed&#39; which means that the facility cannot be withdrawn without reasonable notification before it&#39;s agreed end date, or &#39;on demand&#39; which means that the financial institution can demand repayment at any point in time.
   * @return overdraftType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An overdraft can either be 'committed' which means that the facility cannot be withdrawn without reasonable notification before it's agreed end date, or 'on demand' which means that the financial institution can demand repayment at any point in time.")

  public OverdraftTypeEnum getOverdraftType() {
    return overdraftType;
  }


  public void setOverdraftType(OverdraftTypeEnum overdraftType) {
    
    
    
    this.overdraftType = overdraftType;
  }


  public OverdraftTierBandSetPropertyInner tierBandMethod(TierBandMethodEnum tierBandMethod) {
    
    
    
    
    this.tierBandMethod = tierBandMethod;
    return this;
  }

   /**
   * The methodology of how overdraft is charged. It can be: &#39;Whole&#39;  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).  &#39;Tiered&#39; Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation &#39;Banded&#39; Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.
   * @return tierBandMethod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The methodology of how overdraft is charged. It can be: 'Whole'  Where the same charge/rate is applied to the entirety of the overdraft balance (where charges are applicable).  'Tiered' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount tiers defined by the lending financial organisation 'Banded' Where different charges/rates are applied dependent on overdraft maximum and minimum balance amount bands defined by a government organisation.")

  public TierBandMethodEnum getTierBandMethod() {
    return tierBandMethod;
  }


  public void setTierBandMethod(TierBandMethodEnum tierBandMethod) {
    
    
    
    this.tierBandMethod = tierBandMethod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OverdraftTierBandSetPropertyInner instance itself
   */
  public OverdraftTierBandSetPropertyInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverdraftTierBandSetPropertyInner overdraftTierBandSetPropertyInner = (OverdraftTierBandSetPropertyInner) o;
    return Objects.equals(this.authorisedIndicator, overdraftTierBandSetPropertyInner.authorisedIndicator) &&
        Objects.equals(this.bufferAmount, overdraftTierBandSetPropertyInner.bufferAmount) &&
        Objects.equals(this.identification, overdraftTierBandSetPropertyInner.identification) &&
        Objects.equals(this.notes, overdraftTierBandSetPropertyInner.notes) &&
        Objects.equals(this.overdraftFeesCharges, overdraftTierBandSetPropertyInner.overdraftFeesCharges) &&
        Objects.equals(this.overdraftTierBand, overdraftTierBandSetPropertyInner.overdraftTierBand) &&
        Objects.equals(this.overdraftType, overdraftTierBandSetPropertyInner.overdraftType) &&
        Objects.equals(this.tierBandMethod, overdraftTierBandSetPropertyInner.tierBandMethod)&&
        Objects.equals(this.additionalProperties, overdraftTierBandSetPropertyInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorisedIndicator, bufferAmount, identification, notes, overdraftFeesCharges, overdraftTierBand, overdraftType, tierBandMethod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverdraftTierBandSetPropertyInner {\n");
    sb.append("    authorisedIndicator: ").append(toIndentedString(authorisedIndicator)).append("\n");
    sb.append("    bufferAmount: ").append(toIndentedString(bufferAmount)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    overdraftFeesCharges: ").append(toIndentedString(overdraftFeesCharges)).append("\n");
    sb.append("    overdraftTierBand: ").append(toIndentedString(overdraftTierBand)).append("\n");
    sb.append("    overdraftType: ").append(toIndentedString(overdraftType)).append("\n");
    sb.append("    tierBandMethod: ").append(toIndentedString(tierBandMethod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthorisedIndicator");
    openapiFields.add("BufferAmount");
    openapiFields.add("Identification");
    openapiFields.add("Notes");
    openapiFields.add("OverdraftFeesCharges");
    openapiFields.add("OverdraftTierBand");
    openapiFields.add("OverdraftType");
    openapiFields.add("TierBandMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OverdraftTierBand");
    openapiRequiredFields.add("TierBandMethod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OverdraftTierBandSetPropertyInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OverdraftTierBandSetPropertyInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OverdraftTierBandSetPropertyInner is not found in the empty JSON string", OverdraftTierBandSetPropertyInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OverdraftTierBandSetPropertyInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("BufferAmount") != null && !jsonObj.get("BufferAmount").isJsonNull()) && !jsonObj.get("BufferAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BufferAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BufferAmount").toString()));
      }
      if ((jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) && !jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if (jsonObj.get("OverdraftFeesCharges") != null && !jsonObj.get("OverdraftFeesCharges").isJsonNull()) {
        JsonArray jsonArrayoverdraftFeesCharges = jsonObj.getAsJsonArray("OverdraftFeesCharges");
        if (jsonArrayoverdraftFeesCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OverdraftFeesCharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OverdraftFeesCharges` to be an array in the JSON string but got `%s`", jsonObj.get("OverdraftFeesCharges").toString()));
          }

          // validate the optional field `OverdraftFeesCharges` (array)
          for (int i = 0; i < jsonArrayoverdraftFeesCharges.size(); i++) {
            OverdraftFeesChargesPropertyInner.validateJsonObject(jsonArrayoverdraftFeesCharges.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("OverdraftTierBand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `OverdraftTierBand` to be an array in the JSON string but got `%s`", jsonObj.get("OverdraftTierBand").toString()));
      }

      JsonArray jsonArrayoverdraftTierBand = jsonObj.getAsJsonArray("OverdraftTierBand");
      // validate the required field `OverdraftTierBand` (array)
      for (int i = 0; i < jsonArrayoverdraftTierBand.size(); i++) {
        OverdraftTierBandPropertyInner.validateJsonObject(jsonArrayoverdraftTierBand.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("OverdraftType") != null && !jsonObj.get("OverdraftType").isJsonNull()) && !jsonObj.get("OverdraftType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OverdraftType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OverdraftType").toString()));
      }
      if (!jsonObj.get("TierBandMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierBandMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierBandMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OverdraftTierBandSetPropertyInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OverdraftTierBandSetPropertyInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OverdraftTierBandSetPropertyInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OverdraftTierBandSetPropertyInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OverdraftTierBandSetPropertyInner>() {
           @Override
           public void write(JsonWriter out, OverdraftTierBandSetPropertyInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OverdraftTierBandSetPropertyInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OverdraftTierBandSetPropertyInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OverdraftTierBandSetPropertyInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OverdraftTierBandSetPropertyInner
  * @throws IOException if the JSON string is invalid with respect to OverdraftTierBandSetPropertyInner
  */
  public static OverdraftTierBandSetPropertyInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OverdraftTierBandSetPropertyInner.class);
  }

 /**
  * Convert an instance of OverdraftTierBandSetPropertyInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

