/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBInterestFixedVariableType1Code;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Tier Band Details
 */
@ApiModel(description = "Tier Band Details")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner {
  public static final String SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE = "FixedVariableInterestRateType";
  @SerializedName(SERIALIZED_NAME_FIXED_VARIABLE_INTEREST_RATE_TYPE)
  private OBInterestFixedVariableType1Code fixedVariableInterestRateType;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_LOAN_INTEREST_FEES_CHARGES = "LoanInterestFeesCharges";
  @SerializedName(SERIALIZED_NAME_LOAN_INTEREST_FEES_CHARGES)
  private List<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner> loanInterestFeesCharges = null;

  public static final String SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE = "LoanProviderInterestRate";
  @SerializedName(SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE)
  private String loanProviderInterestRate;

  /**
   * Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
   */
  @JsonAdapter(LoanProviderInterestRateTypeEnum.Adapter.class)
 public enum LoanProviderInterestRateTypeEnum {
    INBB("INBB"),
    
    INFR("INFR"),
    
    INGR("INGR"),
    
    INLR("INLR"),
    
    INNE("INNE"),
    
    INOT("INOT");

    private String value;

    LoanProviderInterestRateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LoanProviderInterestRateTypeEnum fromValue(String value) {
      for (LoanProviderInterestRateTypeEnum b : LoanProviderInterestRateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LoanProviderInterestRateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LoanProviderInterestRateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LoanProviderInterestRateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LoanProviderInterestRateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE_TYPE = "LoanProviderInterestRateType";
  @SerializedName(SERIALIZED_NAME_LOAN_PROVIDER_INTEREST_RATE_TYPE)
  private LoanProviderInterestRateTypeEnum loanProviderInterestRateType;

  /**
   * The unit of period (days, weeks, months etc.) of the Maximum Term
   */
  @JsonAdapter(MaxTermPeriodEnum.Adapter.class)
 public enum MaxTermPeriodEnum {
    PACT("PACT"),
    
    PDAY("PDAY"),
    
    PHYR("PHYR"),
    
    PMTH("PMTH"),
    
    PQTR("PQTR"),
    
    PWEK("PWEK"),
    
    PYER("PYER");

    private String value;

    MaxTermPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxTermPeriodEnum fromValue(String value) {
      for (MaxTermPeriodEnum b : MaxTermPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxTermPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxTermPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxTermPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxTermPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MAX_TERM_PERIOD = "MaxTermPeriod";
  @SerializedName(SERIALIZED_NAME_MAX_TERM_PERIOD)
  private MaxTermPeriodEnum maxTermPeriod;

  /**
   * The unit of period (days, weeks, months etc.) of the Minimum Term
   */
  @JsonAdapter(MinTermPeriodEnum.Adapter.class)
 public enum MinTermPeriodEnum {
    PACT("PACT"),
    
    PDAY("PDAY"),
    
    PHYR("PHYR"),
    
    PMTH("PMTH"),
    
    PQTR("PQTR"),
    
    PWEK("PWEK"),
    
    PYER("PYER");

    private String value;

    MinTermPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTermPeriodEnum fromValue(String value) {
      for (MinTermPeriodEnum b : MinTermPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTermPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTermPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTermPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTermPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIN_TERM_PERIOD = "MinTermPeriod";
  @SerializedName(SERIALIZED_NAME_MIN_TERM_PERIOD)
  private MinTermPeriodEnum minTermPeriod;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OTHER_LOAN_PROVIDER_INTEREST_RATE_TYPE = "OtherLoanProviderInterestRateType";
  @SerializedName(SERIALIZED_NAME_OTHER_LOAN_PROVIDER_INTEREST_RATE_TYPE)
  private OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType otherLoanProviderInterestRateType;

  public static final String SERIALIZED_NAME_REP_A_P_R = "RepAPR";
  @SerializedName(SERIALIZED_NAME_REP_A_P_R)
  private String repAPR;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAX_TERM = "TierValueMaxTerm";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAX_TERM)
  private Integer tierValueMaxTerm;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAXIMUM = "TierValueMaximum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAXIMUM)
  private String tierValueMaximum;

  public static final String SERIALIZED_NAME_TIER_VALUE_MIN_TERM = "TierValueMinTerm";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MIN_TERM)
  private Integer tierValueMinTerm;

  public static final String SERIALIZED_NAME_TIER_VALUE_MINIMUM = "TierValueMinimum";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MINIMUM)
  private String tierValueMinimum;

  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner() {
  }

  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner fixedVariableInterestRateType(OBInterestFixedVariableType1Code fixedVariableInterestRateType) {
    
    
    
    
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
    return this;
  }

   /**
   * Get fixedVariableInterestRateType
   * @return fixedVariableInterestRateType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OBInterestFixedVariableType1Code getFixedVariableInterestRateType() {
    return fixedVariableInterestRateType;
  }


  public void setFixedVariableInterestRateType(OBInterestFixedVariableType1Code fixedVariableInterestRateType) {
    
    
    
    this.fixedVariableInterestRateType = fixedVariableInterestRateType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner identification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a SME Loan.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a SME Loan.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    this.identification = identification;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner loanInterestFeesCharges(List<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner> loanInterestFeesCharges) {
    
    
    
    
    this.loanInterestFeesCharges = loanInterestFeesCharges;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner addLoanInterestFeesChargesItem(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner loanInterestFeesChargesItem) {
    if (this.loanInterestFeesCharges == null) {
      this.loanInterestFeesCharges = new ArrayList<>();
    }
    this.loanInterestFeesCharges.add(loanInterestFeesChargesItem);
    return this;
  }

   /**
   * Get loanInterestFeesCharges
   * @return loanInterestFeesCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner> getLoanInterestFeesCharges() {
    return loanInterestFeesCharges;
  }


  public void setLoanInterestFeesCharges(List<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner> loanInterestFeesCharges) {
    
    
    
    this.loanInterestFeesCharges = loanInterestFeesCharges;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner loanProviderInterestRate(String loanProviderInterestRate) {
    
    
    
    
    this.loanProviderInterestRate = loanProviderInterestRate;
    return this;
  }

   /**
   * Loan provider Interest for the SME Loan product
   * @return loanProviderInterestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Loan provider Interest for the SME Loan product")

  public String getLoanProviderInterestRate() {
    return loanProviderInterestRate;
  }


  public void setLoanProviderInterestRate(String loanProviderInterestRate) {
    
    
    
    this.loanProviderInterestRate = loanProviderInterestRate;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner loanProviderInterestRateType(LoanProviderInterestRateTypeEnum loanProviderInterestRateType) {
    
    
    
    
    this.loanProviderInterestRateType = loanProviderInterestRateType;
    return this;
  }

   /**
   * Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.
   * @return loanProviderInterestRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interest rate types, other than APR, which financial institutions may use to describe the annual interest rate payable for the SME Loan.")

  public LoanProviderInterestRateTypeEnum getLoanProviderInterestRateType() {
    return loanProviderInterestRateType;
  }


  public void setLoanProviderInterestRateType(LoanProviderInterestRateTypeEnum loanProviderInterestRateType) {
    
    
    
    this.loanProviderInterestRateType = loanProviderInterestRateType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner maxTermPeriod(MaxTermPeriodEnum maxTermPeriod) {
    
    
    
    
    this.maxTermPeriod = maxTermPeriod;
    return this;
  }

   /**
   * The unit of period (days, weeks, months etc.) of the Maximum Term
   * @return maxTermPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unit of period (days, weeks, months etc.) of the Maximum Term")

  public MaxTermPeriodEnum getMaxTermPeriod() {
    return maxTermPeriod;
  }


  public void setMaxTermPeriod(MaxTermPeriodEnum maxTermPeriod) {
    
    
    
    this.maxTermPeriod = maxTermPeriod;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner minTermPeriod(MinTermPeriodEnum minTermPeriod) {
    
    
    
    
    this.minTermPeriod = minTermPeriod;
    return this;
  }

   /**
   * The unit of period (days, weeks, months etc.) of the Minimum Term
   * @return minTermPeriod
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The unit of period (days, weeks, months etc.) of the Minimum Term")

  public MinTermPeriodEnum getMinTermPeriod() {
    return minTermPeriod;
  }


  public void setMinTermPeriod(MinTermPeriodEnum minTermPeriod) {
    
    
    
    this.minTermPeriod = minTermPeriod;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner otherLoanProviderInterestRateType(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType otherLoanProviderInterestRateType) {
    
    
    
    
    this.otherLoanProviderInterestRateType = otherLoanProviderInterestRateType;
    return this;
  }

   /**
   * Get otherLoanProviderInterestRateType
   * @return otherLoanProviderInterestRateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType getOtherLoanProviderInterestRateType() {
    return otherLoanProviderInterestRateType;
  }


  public void setOtherLoanProviderInterestRateType(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType otherLoanProviderInterestRateType) {
    
    
    
    this.otherLoanProviderInterestRateType = otherLoanProviderInterestRateType;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner repAPR(String repAPR) {
    
    
    
    
    this.repAPR = repAPR;
    return this;
  }

   /**
   * The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.
   * @return repAPR
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The annual equivalent rate (AER) is interest that is calculated under the assumption that any interest paid is combined with the original balance and the next interest payment will be based on the slightly higher account balance. Overall, this means that interest can be compounded several times in a year depending on the number of times that interest payments are made.  For SME Loan, this APR is the representative APR which includes any account fees.")

  public String getRepAPR() {
    return repAPR;
  }


  public void setRepAPR(String repAPR) {
    
    
    
    this.repAPR = repAPR;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner tierValueMaxTerm(Integer tierValueMaxTerm) {
    
    
    
    
    this.tierValueMaxTerm = tierValueMaxTerm;
    return this;
  }

   /**
   * Maximum loan term for which the loan interest tier applies.
   * @return tierValueMaxTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum loan term for which the loan interest tier applies.")

  public Integer getTierValueMaxTerm() {
    return tierValueMaxTerm;
  }


  public void setTierValueMaxTerm(Integer tierValueMaxTerm) {
    
    
    
    this.tierValueMaxTerm = tierValueMaxTerm;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner tierValueMaximum(String tierValueMaximum) {
    
    
    
    
    this.tierValueMaximum = tierValueMaximum;
    return this;
  }

   /**
   * Maximum loan value for which the loan interest tier applies.
   * @return tierValueMaximum
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum loan value for which the loan interest tier applies.")

  public String getTierValueMaximum() {
    return tierValueMaximum;
  }


  public void setTierValueMaximum(String tierValueMaximum) {
    
    
    
    this.tierValueMaximum = tierValueMaximum;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner tierValueMinTerm(Integer tierValueMinTerm) {
    
    
    
    
    this.tierValueMinTerm = tierValueMinTerm;
    return this;
  }

   /**
   * Minimum loan term for which the loan interest tier applies.
   * @return tierValueMinTerm
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum loan term for which the loan interest tier applies.")

  public Integer getTierValueMinTerm() {
    return tierValueMinTerm;
  }


  public void setTierValueMinTerm(Integer tierValueMinTerm) {
    
    
    
    this.tierValueMinTerm = tierValueMinTerm;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner tierValueMinimum(String tierValueMinimum) {
    
    
    
    
    this.tierValueMinimum = tierValueMinimum;
    return this;
  }

   /**
   * Minimum loan value for which the loan interest tier applies.
   * @return tierValueMinimum
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum loan value for which the loan interest tier applies.")

  public String getTierValueMinimum() {
    return tierValueMinimum;
  }


  public void setTierValueMinimum(String tierValueMinimum) {
    
    
    
    this.tierValueMinimum = tierValueMinimum;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner instance itself
   */
  public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner = (OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner) o;
    return Objects.equals(this.fixedVariableInterestRateType, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.fixedVariableInterestRateType) &&
        Objects.equals(this.identification, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.identification) &&
        Objects.equals(this.loanInterestFeesCharges, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.loanInterestFeesCharges) &&
        Objects.equals(this.loanProviderInterestRate, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.loanProviderInterestRate) &&
        Objects.equals(this.loanProviderInterestRateType, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.loanProviderInterestRateType) &&
        Objects.equals(this.maxTermPeriod, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.maxTermPeriod) &&
        Objects.equals(this.minTermPeriod, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.minTermPeriod) &&
        Objects.equals(this.notes, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.notes) &&
        Objects.equals(this.otherLoanProviderInterestRateType, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.otherLoanProviderInterestRateType) &&
        Objects.equals(this.repAPR, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.repAPR) &&
        Objects.equals(this.tierValueMaxTerm, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.tierValueMaxTerm) &&
        Objects.equals(this.tierValueMaximum, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.tierValueMaximum) &&
        Objects.equals(this.tierValueMinTerm, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.tierValueMinTerm) &&
        Objects.equals(this.tierValueMinimum, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.tierValueMinimum)&&
        Objects.equals(this.additionalProperties, obReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedVariableInterestRateType, identification, loanInterestFeesCharges, loanProviderInterestRate, loanProviderInterestRateType, maxTermPeriod, minTermPeriod, notes, otherLoanProviderInterestRateType, repAPR, tierValueMaxTerm, tierValueMaximum, tierValueMinTerm, tierValueMinimum, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner {\n");
    sb.append("    fixedVariableInterestRateType: ").append(toIndentedString(fixedVariableInterestRateType)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    loanInterestFeesCharges: ").append(toIndentedString(loanInterestFeesCharges)).append("\n");
    sb.append("    loanProviderInterestRate: ").append(toIndentedString(loanProviderInterestRate)).append("\n");
    sb.append("    loanProviderInterestRateType: ").append(toIndentedString(loanProviderInterestRateType)).append("\n");
    sb.append("    maxTermPeriod: ").append(toIndentedString(maxTermPeriod)).append("\n");
    sb.append("    minTermPeriod: ").append(toIndentedString(minTermPeriod)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    otherLoanProviderInterestRateType: ").append(toIndentedString(otherLoanProviderInterestRateType)).append("\n");
    sb.append("    repAPR: ").append(toIndentedString(repAPR)).append("\n");
    sb.append("    tierValueMaxTerm: ").append(toIndentedString(tierValueMaxTerm)).append("\n");
    sb.append("    tierValueMaximum: ").append(toIndentedString(tierValueMaximum)).append("\n");
    sb.append("    tierValueMinTerm: ").append(toIndentedString(tierValueMinTerm)).append("\n");
    sb.append("    tierValueMinimum: ").append(toIndentedString(tierValueMinimum)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FixedVariableInterestRateType");
    openapiFields.add("Identification");
    openapiFields.add("LoanInterestFeesCharges");
    openapiFields.add("LoanProviderInterestRate");
    openapiFields.add("LoanProviderInterestRateType");
    openapiFields.add("MaxTermPeriod");
    openapiFields.add("MinTermPeriod");
    openapiFields.add("Notes");
    openapiFields.add("OtherLoanProviderInterestRateType");
    openapiFields.add("RepAPR");
    openapiFields.add("TierValueMaxTerm");
    openapiFields.add("TierValueMaximum");
    openapiFields.add("TierValueMinTerm");
    openapiFields.add("TierValueMinimum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FixedVariableInterestRateType");
    openapiRequiredFields.add("MinTermPeriod");
    openapiRequiredFields.add("RepAPR");
    openapiRequiredFields.add("TierValueMinTerm");
    openapiRequiredFields.add("TierValueMinimum");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner is not found in the empty JSON string", OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) && !jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      if (jsonObj.get("LoanInterestFeesCharges") != null && !jsonObj.get("LoanInterestFeesCharges").isJsonNull()) {
        JsonArray jsonArrayloanInterestFeesCharges = jsonObj.getAsJsonArray("LoanInterestFeesCharges");
        if (jsonArrayloanInterestFeesCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LoanInterestFeesCharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LoanInterestFeesCharges` to be an array in the JSON string but got `%s`", jsonObj.get("LoanInterestFeesCharges").toString()));
          }

          // validate the optional field `LoanInterestFeesCharges` (array)
          for (int i = 0; i < jsonArrayloanInterestFeesCharges.size(); i++) {
            OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestFeesChargesInner.validateJsonObject(jsonArrayloanInterestFeesCharges.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("LoanProviderInterestRate") != null && !jsonObj.get("LoanProviderInterestRate").isJsonNull()) && !jsonObj.get("LoanProviderInterestRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoanProviderInterestRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoanProviderInterestRate").toString()));
      }
      if ((jsonObj.get("LoanProviderInterestRateType") != null && !jsonObj.get("LoanProviderInterestRateType").isJsonNull()) && !jsonObj.get("LoanProviderInterestRateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoanProviderInterestRateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoanProviderInterestRateType").toString()));
      }
      if ((jsonObj.get("MaxTermPeriod") != null && !jsonObj.get("MaxTermPeriod").isJsonNull()) && !jsonObj.get("MaxTermPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxTermPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxTermPeriod").toString()));
      }
      if (!jsonObj.get("MinTermPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinTermPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinTermPeriod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      // validate the optional field `OtherLoanProviderInterestRateType`
      if (jsonObj.get("OtherLoanProviderInterestRateType") != null && !jsonObj.get("OtherLoanProviderInterestRateType").isJsonNull()) {
        OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInnerOtherLoanProviderInterestRateType.validateJsonObject(jsonObj.getAsJsonObject("OtherLoanProviderInterestRateType"));
      }
      if (!jsonObj.get("RepAPR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RepAPR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RepAPR").toString()));
      }
      if ((jsonObj.get("TierValueMaximum") != null && !jsonObj.get("TierValueMaximum").isJsonNull()) && !jsonObj.get("TierValueMaximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMaximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMaximum").toString()));
      }
      if (!jsonObj.get("TierValueMinimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMinimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMinimum").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner>() {
           @Override
           public void write(JsonWriter out, OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner
  * @throws IOException if the JSON string is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner
  */
  public static OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner.class);
  }

 /**
  * Convert an instance of OBReadProduct2DataProductInnerOtherProductTypeLoanInterestLoanInterestTierBandSetInnerLoanInterestTierBandInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

