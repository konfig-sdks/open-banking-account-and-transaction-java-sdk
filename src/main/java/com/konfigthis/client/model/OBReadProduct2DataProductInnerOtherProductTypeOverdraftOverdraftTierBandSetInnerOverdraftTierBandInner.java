/*
 * Account and Transaction API Specification
 * Swagger for Account and Transaction API Specification
 *
 * The version of the OpenAPI document: 3.1.7
 * Contact: ServiceDesk@openbanking.org.uk
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Provides overdraft details for a specific tier or band
 */
@ApiModel(description = "Provides overdraft details for a specific tier or band")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner {
  public static final String SERIALIZED_NAME_AGREEMENT_LENGTH_MAX = "AgreementLengthMax";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_LENGTH_MAX)
  private Integer agreementLengthMax;

  public static final String SERIALIZED_NAME_AGREEMENT_LENGTH_MIN = "AgreementLengthMin";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_LENGTH_MIN)
  private Integer agreementLengthMin;

  /**
   * Specifies the period of a fixed length overdraft agreement
   */
  @JsonAdapter(AgreementPeriodEnum.Adapter.class)
 public enum AgreementPeriodEnum {
    PACT("PACT"),
    
    PDAY("PDAY"),
    
    PHYR("PHYR"),
    
    PMTH("PMTH"),
    
    PQTR("PQTR"),
    
    PWEK("PWEK"),
    
    PYER("PYER");

    private String value;

    AgreementPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgreementPeriodEnum fromValue(String value) {
      for (AgreementPeriodEnum b : AgreementPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgreementPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgreementPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgreementPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgreementPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGREEMENT_PERIOD = "AgreementPeriod";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_PERIOD)
  private AgreementPeriodEnum agreementPeriod;

  public static final String SERIALIZED_NAME_BANK_GUARANTEED_INDICATOR = "BankGuaranteedIndicator";
  @SerializedName(SERIALIZED_NAME_BANK_GUARANTEED_INDICATOR)
  private Boolean bankGuaranteedIndicator;

  public static final String SERIALIZED_NAME_E_A_R = "EAR";
  @SerializedName(SERIALIZED_NAME_E_A_R)
  private String EAR;

  public static final String SERIALIZED_NAME_IDENTIFICATION = "Identification";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION)
  private String identification;

  public static final String SERIALIZED_NAME_NOTES = "Notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<String> notes = null;

  public static final String SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES = "OverdraftFeesCharges";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_FEES_CHARGES)
  private List<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner> overdraftFeesCharges = null;

  /**
   * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
   */
  @JsonAdapter(OverdraftInterestChargingCoverageEnum.Adapter.class)
 public enum OverdraftInterestChargingCoverageEnum {
    INBA("INBA"),
    
    INTI("INTI"),
    
    INWH("INWH");

    private String value;

    OverdraftInterestChargingCoverageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverdraftInterestChargingCoverageEnum fromValue(String value) {
      for (OverdraftInterestChargingCoverageEnum b : OverdraftInterestChargingCoverageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverdraftInterestChargingCoverageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverdraftInterestChargingCoverageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverdraftInterestChargingCoverageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverdraftInterestChargingCoverageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OVERDRAFT_INTEREST_CHARGING_COVERAGE = "OverdraftInterestChargingCoverage";
  @SerializedName(SERIALIZED_NAME_OVERDRAFT_INTEREST_CHARGING_COVERAGE)
  private OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage;

  public static final String SERIALIZED_NAME_TIER_VALUE_MAX = "TierValueMax";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MAX)
  private String tierValueMax;

  public static final String SERIALIZED_NAME_TIER_VALUE_MIN = "TierValueMin";
  @SerializedName(SERIALIZED_NAME_TIER_VALUE_MIN)
  private String tierValueMin;

  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner() {
  }

  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner agreementLengthMax(Integer agreementLengthMax) {
    
    
    
    
    this.agreementLengthMax = agreementLengthMax;
    return this;
  }

   /**
   * Specifies the maximum length of a band for a fixed overdraft agreement
   * @return agreementLengthMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum length of a band for a fixed overdraft agreement")

  public Integer getAgreementLengthMax() {
    return agreementLengthMax;
  }


  public void setAgreementLengthMax(Integer agreementLengthMax) {
    
    
    
    this.agreementLengthMax = agreementLengthMax;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner agreementLengthMin(Integer agreementLengthMin) {
    
    
    
    
    this.agreementLengthMin = agreementLengthMin;
    return this;
  }

   /**
   * Specifies the minimum length of a band for a fixed overdraft agreement
   * @return agreementLengthMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the minimum length of a band for a fixed overdraft agreement")

  public Integer getAgreementLengthMin() {
    return agreementLengthMin;
  }


  public void setAgreementLengthMin(Integer agreementLengthMin) {
    
    
    
    this.agreementLengthMin = agreementLengthMin;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner agreementPeriod(AgreementPeriodEnum agreementPeriod) {
    
    
    
    
    this.agreementPeriod = agreementPeriod;
    return this;
  }

   /**
   * Specifies the period of a fixed length overdraft agreement
   * @return agreementPeriod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the period of a fixed length overdraft agreement")

  public AgreementPeriodEnum getAgreementPeriod() {
    return agreementPeriod;
  }


  public void setAgreementPeriod(AgreementPeriodEnum agreementPeriod) {
    
    
    
    this.agreementPeriod = agreementPeriod;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner bankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
    
    
    
    
    this.bankGuaranteedIndicator = bankGuaranteedIndicator;
    return this;
  }

   /**
   * Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.
   * @return bankGuaranteedIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the advertised overdraft rate is guaranteed to be offered to a borrower by the bank e.g. if it�s part of a government scheme, or whether the rate may vary dependent on the applicant�s circumstances.")

  public Boolean getBankGuaranteedIndicator() {
    return bankGuaranteedIndicator;
  }


  public void setBankGuaranteedIndicator(Boolean bankGuaranteedIndicator) {
    
    
    
    this.bankGuaranteedIndicator = bankGuaranteedIndicator;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner EAR(String EAR) {
    
    
    
    
    this.EAR = EAR;
    return this;
  }

   /**
   * EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.
   * @return EAR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EAR means Effective Annual Rate and/or Equivalent Annual Rate (frequently used interchangeably), being the actual annual interest rate of an Overdraft.")

  public String getEAR() {
    return EAR;
  }


  public void setEAR(String EAR) {
    
    
    
    this.EAR = EAR;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner identification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    
    this.identification = identification;
    return this;
  }

   /**
   * Unique and unambiguous identification of a  Tier Band for a overdraft.
   * @return identification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique and unambiguous identification of a  Tier Band for a overdraft.")

  public String getIdentification() {
    return identification;
  }


  public void setIdentification(String identification) {
    
    
    if (identification != null && identification.length() < 1) {
      throw new IllegalArgumentException("Invalid value for identification. Length must be greater than or equal to 1.");
    }
    this.identification = identification;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner notes(List<String> notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner addNotesItem(String notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNotes() {
    return notes;
  }


  public void setNotes(List<String> notes) {
    
    
    
    this.notes = notes;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner overdraftFeesCharges(List<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner> overdraftFeesCharges) {
    
    
    
    
    this.overdraftFeesCharges = overdraftFeesCharges;
    return this;
  }

  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner addOverdraftFeesChargesItem(OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner overdraftFeesChargesItem) {
    if (this.overdraftFeesCharges == null) {
      this.overdraftFeesCharges = new ArrayList<>();
    }
    this.overdraftFeesCharges.add(overdraftFeesChargesItem);
    return this;
  }

   /**
   * Get overdraftFeesCharges
   * @return overdraftFeesCharges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner> getOverdraftFeesCharges() {
    return overdraftFeesCharges;
  }


  public void setOverdraftFeesCharges(List<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner> overdraftFeesCharges) {
    
    
    
    this.overdraftFeesCharges = overdraftFeesCharges;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner overdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
    
    
    
    
    this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
    return this;
  }

   /**
   * Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.
   * @return overdraftInterestChargingCoverage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Refers to which interest rate is applied when interests are tiered. For example, if an overdraft balance is �2k and the interest tiers are:- 0-�500 0.1%, 500-1000 0.2%, 1000-10000 0.5%, then the applicable interest rate could either be 0.5% of the entire balance (since the account balance sits in the top interest tier) or (0.1%*500)+(0.2%*500)+(0.5%*1000). In the 1st situation, we say the interest is applied to the �Whole� of the account balance,  and in the 2nd that it is �Tiered�.")

  public OverdraftInterestChargingCoverageEnum getOverdraftInterestChargingCoverage() {
    return overdraftInterestChargingCoverage;
  }


  public void setOverdraftInterestChargingCoverage(OverdraftInterestChargingCoverageEnum overdraftInterestChargingCoverage) {
    
    
    
    this.overdraftInterestChargingCoverage = overdraftInterestChargingCoverage;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner tierValueMax(String tierValueMax) {
    
    
    
    
    this.tierValueMax = tierValueMax;
    return this;
  }

   /**
   * Maximum value of Overdraft Tier/Band
   * @return tierValueMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum value of Overdraft Tier/Band")

  public String getTierValueMax() {
    return tierValueMax;
  }


  public void setTierValueMax(String tierValueMax) {
    
    
    
    this.tierValueMax = tierValueMax;
  }


  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner tierValueMin(String tierValueMin) {
    
    
    
    
    this.tierValueMin = tierValueMin;
    return this;
  }

   /**
   * Minimum value of Overdraft Tier/Band
   * @return tierValueMin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum value of Overdraft Tier/Band")

  public String getTierValueMin() {
    return tierValueMin;
  }


  public void setTierValueMin(String tierValueMin) {
    
    
    
    this.tierValueMin = tierValueMin;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner instance itself
   */
  public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner = (OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner) o;
    return Objects.equals(this.agreementLengthMax, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.agreementLengthMax) &&
        Objects.equals(this.agreementLengthMin, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.agreementLengthMin) &&
        Objects.equals(this.agreementPeriod, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.agreementPeriod) &&
        Objects.equals(this.bankGuaranteedIndicator, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.bankGuaranteedIndicator) &&
        Objects.equals(this.EAR, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.EAR) &&
        Objects.equals(this.identification, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.identification) &&
        Objects.equals(this.notes, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.notes) &&
        Objects.equals(this.overdraftFeesCharges, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.overdraftFeesCharges) &&
        Objects.equals(this.overdraftInterestChargingCoverage, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.overdraftInterestChargingCoverage) &&
        Objects.equals(this.tierValueMax, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.tierValueMax) &&
        Objects.equals(this.tierValueMin, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.tierValueMin)&&
        Objects.equals(this.additionalProperties, obReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementLengthMax, agreementLengthMin, agreementPeriod, bankGuaranteedIndicator, EAR, identification, notes, overdraftFeesCharges, overdraftInterestChargingCoverage, tierValueMax, tierValueMin, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner {\n");
    sb.append("    agreementLengthMax: ").append(toIndentedString(agreementLengthMax)).append("\n");
    sb.append("    agreementLengthMin: ").append(toIndentedString(agreementLengthMin)).append("\n");
    sb.append("    agreementPeriod: ").append(toIndentedString(agreementPeriod)).append("\n");
    sb.append("    bankGuaranteedIndicator: ").append(toIndentedString(bankGuaranteedIndicator)).append("\n");
    sb.append("    EAR: ").append(toIndentedString(EAR)).append("\n");
    sb.append("    identification: ").append(toIndentedString(identification)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    overdraftFeesCharges: ").append(toIndentedString(overdraftFeesCharges)).append("\n");
    sb.append("    overdraftInterestChargingCoverage: ").append(toIndentedString(overdraftInterestChargingCoverage)).append("\n");
    sb.append("    tierValueMax: ").append(toIndentedString(tierValueMax)).append("\n");
    sb.append("    tierValueMin: ").append(toIndentedString(tierValueMin)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AgreementLengthMax");
    openapiFields.add("AgreementLengthMin");
    openapiFields.add("AgreementPeriod");
    openapiFields.add("BankGuaranteedIndicator");
    openapiFields.add("EAR");
    openapiFields.add("Identification");
    openapiFields.add("Notes");
    openapiFields.add("OverdraftFeesCharges");
    openapiFields.add("OverdraftInterestChargingCoverage");
    openapiFields.add("TierValueMax");
    openapiFields.add("TierValueMin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TierValueMin");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner is not found in the empty JSON string", OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("AgreementPeriod") != null && !jsonObj.get("AgreementPeriod").isJsonNull()) && !jsonObj.get("AgreementPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AgreementPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AgreementPeriod").toString()));
      }
      if ((jsonObj.get("EAR") != null && !jsonObj.get("EAR").isJsonNull()) && !jsonObj.get("EAR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EAR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EAR").toString()));
      }
      if ((jsonObj.get("Identification") != null && !jsonObj.get("Identification").isJsonNull()) && !jsonObj.get("Identification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Identification").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Notes") != null && !jsonObj.get("Notes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Notes` to be an array in the JSON string but got `%s`", jsonObj.get("Notes").toString()));
      }
      if (jsonObj.get("OverdraftFeesCharges") != null && !jsonObj.get("OverdraftFeesCharges").isJsonNull()) {
        JsonArray jsonArrayoverdraftFeesCharges = jsonObj.getAsJsonArray("OverdraftFeesCharges");
        if (jsonArrayoverdraftFeesCharges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OverdraftFeesCharges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OverdraftFeesCharges` to be an array in the JSON string but got `%s`", jsonObj.get("OverdraftFeesCharges").toString()));
          }

          // validate the optional field `OverdraftFeesCharges` (array)
          for (int i = 0; i < jsonArrayoverdraftFeesCharges.size(); i++) {
            OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInnerOverdraftFeesChargesInner.validateJsonObject(jsonArrayoverdraftFeesCharges.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("OverdraftInterestChargingCoverage") != null && !jsonObj.get("OverdraftInterestChargingCoverage").isJsonNull()) && !jsonObj.get("OverdraftInterestChargingCoverage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OverdraftInterestChargingCoverage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OverdraftInterestChargingCoverage").toString()));
      }
      if ((jsonObj.get("TierValueMax") != null && !jsonObj.get("TierValueMax").isJsonNull()) && !jsonObj.get("TierValueMax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMax").toString()));
      }
      if (!jsonObj.get("TierValueMin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TierValueMin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TierValueMin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.class));

       return (TypeAdapter<T>) new TypeAdapter<OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner>() {
           @Override
           public void write(JsonWriter out, OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner
  * @throws IOException if the JSON string is invalid with respect to OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner
  */
  public static OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner.class);
  }

 /**
  * Convert an instance of OBReadProduct2DataProductInnerOtherProductTypeOverdraftOverdraftTierBandSetInnerOverdraftTierBandInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

